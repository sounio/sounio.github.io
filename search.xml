<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一些基础知识</title>
      <link href="/2023/05/08/%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/05/08/%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h3 id="jar"><a href="#jar" class="headerlink" title="jar"></a>jar</h3><p>jar包就是 Java Archive File。其实就是一个项目的打包,或者说是一些能够直接拿来用的业务模块。</p><p>jar 与 zip 唯一的区别就是在 jar 文件的内容中，包含了一个 META-INF&#x2F;MANIFEST.MF 文件，该文件是在生成 jar 文件的时候自动创建的，作为jar里面的”详情单”，包含了该Jar包的版本、创建人和类搜索路径Class-Path等信息，当然如果是可执行Jar包，会包含<code>Main-Class</code>属性，表明<code>Main方法入口</code>，尤其是较为重要的Class-Path和Main-Class。</p><p>有的jar包是可以直接通过 <code>java -jar</code> 指令来执行的。</p><p>当我们开发了一个程序以后，程序中有很多的类，如果需要提供给别人使用,发给对方一大堆源文件是非常不好的，因此通常需要把这些类以及相关的资源文件打包成一个 jar 包,把这个 jar 包提供给别人使用,同时提供给使用者清晰的文档。这样他人在拿到我们提供的jar之后，就能方便地进行调用。而且安全。能够对JAR文件进行数字签名，只让能够识别数字签名的用户使用里面的东西。</p><p>由于jvm实际解析的是.class字节码文件而非.java文件，且jar中最好不要包含代码源文件，将.class文件打个jar包，在src根目录下执行如下指令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar -cvf welcome.jar com/imooc/jardemo1/Welcome.<span class="keyword">class</span> <span class="title class_">com</span>/imooc/jardemo1/impl/Teacher.class</span><br></pre></td></tr></table></figure><p>c表示要创建一个新的jar包，v表示创建的过程中在控制台输出创建过程的一些信息，f表示给生成的jar包命名</p><p>打jar的时候，会生成一个META-INF的目录，里面有&#96;&#96;这个清单列表。要使得jar包能直接运行，需要在清单加上<code>Main-Class</code>，后接main函数所在类的全路径名（注意冒号之后一定要跟英文的空格，整个文件最后有一行空行）。</p><p>在包含调用关系时，需要在<code>MANIFEST.MF</code>中配置<code>Class-Path</code>（如果是多个jar，则用英文空格隔开）。CLASSPATH是<code>指定程序中所使用的类文件所在的位置</code>。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/2023/05/07/Spring/"/>
      <url>/2023/05/07/Spring/</url>
      
        <content type="html"><![CDATA[<h2 id="Ioc和Aop"><a href="#Ioc和Aop" class="headerlink" title="Ioc和Aop"></a>Ioc和Aop</h2><h3 id="IoC"><a href="#IoC" class="headerlink" title="IoC"></a>IoC</h3><p>IoC（<code>Inverse of Control</code>:控制反转）是一种<code>设计思想</code>，就是将原本在程序中手动<code>创建对象</code>的控制权，交由Spring框架来管理。IoC 容器是 Spring 用来实现 IoC 的载体， IoC 容器实际上就是个<code>Map（key，value）</code>,<code>Map 中存放的是各种对象</code>。IOC底层就是个对象工厂。</p><p>将<code>对象之间的相互依赖关系</code>交给 IoC 容器来管理，并由 IoC 容器完成<code>对象的注入</code>。这样可以很大程度上简化应用的开发，把应用从复杂的依赖关系中解放出来。 IoC 容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要<code>配置好配置文件/注解</code>即可，完全<code>不用考虑对象是如何被创建出来的</code>。默认无参构造。</p><p>####Ioc实现方式（两个接口）</p><p>1.BeanFactory</p><p>Spring内部接口。（功能：加载配置文件、创建对象）</p><p>在加载配置文件的时候不会创建对象、获取时才创建。</p><p>2.ApplicationContext</p><p>BeanFactory子接口，功能更多更强。(启动时实现、启动更慢、运行效率更高)</p><p>加载配置文件的时候就会创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载spring配置文件</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line"><span class="type">BeanFactory</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line"><span class="comment">//获取配置创建的对象</span></span><br><span class="line"><span class="type">User</span> <span class="variable">uesr</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;user&quot;</span>,User.class);<span class="comment">// &quot;user&quot;为对象标识，&lt;bean id = &quot;user&quot; class =&quot;com.User&quot;&gt;&lt;/bean&gt;</span></span><br></pre></td></tr></table></figure><p>####Bean管理</p><p>Bean管理就是两个操作：（1）Spring创建对象；（2）Spring注入属性（DI）</p><p>两种方式：1.基于xml配置文件（bean标签）。2.基于注解</p><h4 id="基于注解的方式创建对象"><a href="#基于注解的方式创建对象" class="headerlink" title="基于注解的方式创建对象"></a>基于注解的方式创建对象</h4><p>1.引入依赖</p><p>2.开启组件扫描</p><h4 id="IoC初始化流程"><a href="#IoC初始化流程" class="headerlink" title="IoC初始化流程"></a>IoC初始化流程</h4><p>由refresh()方法启动</p><ul><li><p><code>Resource资源定位</code>：这个Resouce指的是<code>BeanDefinition的资源定位</code>。这个过程就是<code>容器找数据</code>的过程，就像水桶装水需要先找到水一样。</p></li><li><p><code>BeanDefinition的载入和解析</code>：这个载入过程是<code>把用户定义好的Bean表示成Ioc容器内部的数据结构</code>，而这个容器内部的数据结构就是BeanDefition，也就是将定义好的Bean载入成BeanDefinition。一般会使用xml注解，现在也可以使用注解。</p></li><li><p><code>BeanDefinition注册</code>–BeanDefinition向IOC容器的注册过程</p></li><li><p>prepareRefresh()：预备一下， 标记启动时间，上下文环境，我要的材料（beanDefinition）准备好了嘛？</p></li><li><p>obtainFreshBeanFactory()：</p><ul><li>如果已经有了BeanFactory就<code>销毁</code>它里面的<code>单例Bean</code>并关闭这个BeanFactory。</li><li>创建一个新的BeanFactory。</li><li>对这个BeanFactory进行<code>定制</code>（customize),如allowBeanDefinitionOverriding等参数</li><li>转载BeanDefinitions(读取<code>配置文件</code>，将xml转换成对应得BeanDefinition)</li><li>检查是否同时启动了两个BeanFactory。</li></ul></li><li><p>prepareBeanFactory(beanFactory)：<code>设置</code>beanFactory的<code>类加载器</code>，材料（BeanDefinition）<code>解析器</code>等</p></li><li><p>postProcessBeanFactory(beanFactory)：</p><ul><li><code>设置</code>beanFactory的<code>后置处理器</code></li><li>具体的子类可以在这步的时候添加一些特殊的BeanFactoryPostProcessor的实现类或做点什么事</li></ul></li><li><p>invokeBeanFactoryPostProcessors(beanFactory)：</p><ul><li><code>调用</code>beanFactory的<code>后置处理器</code>（BeanDefinitionRegisterPostProcessor和BeanFactoryPostProcessor）</li><li>调用 BeanFactoryPostProcessor 各个实现类的 postProcessBeanFactory(factory) 方法</li></ul></li><li><p>registerBeanPostProcessors(beanFactory)：</p><ul><li>注册 BeanPostProcessor 的实现类（bean的后置处理器）</li><li>此接口两个方法: postProcessBeforeInitialization 和 postProcessAfterInitialization 两个方法分别在 Bean 初始化之前和初始化之后得到执行。注意，到这里 Bean 还没初始化</li></ul></li><li><p>initMessageSource()：对上下文中的消息源进行初始化</p></li><li><p>initApplicationEventMulticaster()：初始化上下文的事件广播器</p></li><li><p>onRefresh()：- 模版方法，具体的子类可以在这里初始化一些特殊的 Bean（在初始化 singleton beans 之前）</p></li><li><p>registerListeners()：注册事件监听器</p></li><li><p>finishBeanFactoryInitialization(beanFactory)：初始化所有的 singleton beans</p></li><li><p>finishRefresh()：最后，广播事件，ApplicationContext 初始化完成</p></li></ul><h4 id="Bean生命周期"><a href="#Bean生命周期" class="headerlink" title="Bean生命周期"></a>Bean生命周期</h4><p>1.通过构造器创建bean实例（无参构造）</p><p>2.为bean 的属性设置值和对其他bean的引用（内部、外部）（调用set方法）</p><p>3.调用bean 的初始化方法（需要进行配置）（init-method）</p><p>4.获取到对象</p><p>5.容器关闭的时候，调用bean 的销毁方法（需要进行配置销毁的方法）(destory-method)</p><h4 id="Bean自动注入"><a href="#Bean自动注入" class="headerlink" title="Bean自动注入"></a>Bean自动注入</h4><p>1.按名称</p><p>2.按类型</p><h3 id="getBean"><a href="#getBean" class="headerlink" title="getBean()"></a>getBean()</h3><p>可以使用接口<code>ApplicationContext</code>中的getBean()方法来获取Spring容器中<code>已初始化的bean</code></p><p>有四种方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getBean(String name)</span><br><span class="line">getBean(Class&lt;T&gt; type)</span><br><span class="line">getBean(String name,Class&lt;T&gt; type)</span><br><span class="line">getBean(String name,Object[] args)</span><br></pre></td></tr></table></figure><p>###Spring注解</p><p>1、spring作用在类上的注解有<code>@Component</code>、<code>@Responsity</code>、<code>@Service</code>以及<code>@Controller</code>；而<code>@Autowired</code>和<code>@Resource</code>是用来修饰<code>字段</code>、<code>构造函数</code>或者<code>设置方法</code>，并做注入的。</p><p>2、当注解作用在类上时，表明这些类是交给spring容器进行管理的，而当使用@Autowired和@Resource时，表明我需要某个属性、方法或字段，但是并不需要我自己去new一个，只需要使用注解，spring容器会自动的将我需要的属性、方法或对象创造出来。这就是通常所说的依赖注入和控制反转。</p><p>####@Component注解</p><p>在<code>持久层</code>、<code>业务层</code>和<code>控制层</code>中，分别采用<code>@Repository（实现dao访问）</code>、<code>@Service 服务（注入dao)</code>和<code>@Controller控制器（注入服务）</code>对分层中的类进行注入，而用<code>@Component</code>对那些比较<code>中立的类</code>进行实例化注入。</p><p>这个注解的意思就是将这个类交给spring管理。</p><p>####@Autowired</p><p>根据属性类型进行自动装配</p><p>1.把service和dao对象创建，在service和dao类添加创建对象注解</p><p>2.在service注入dao对象，在service类添加dao类型属性，在属性上使用注解</p><p>####@Qualifier</p><p>根据属性名称进行注入</p><h4 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h4><p>可以根据类型也可以根据名称</p><p>####@Value</p><p>注入普通属性类型</p><h3 id="Spring中bean的销毁"><a href="#Spring中bean的销毁" class="headerlink" title="Spring中bean的销毁"></a>Spring中bean的销毁</h3><p>####doCreateBean()</p><p>doCreateBean(beanName, mbd, args) 的主要方法<code>流程</code>：（重点）</p><ul><li><code>createBeanInstance</code>(beanName, mbd, args)：实例化 bean</li><li><code>addSingletonFactory</code>(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean))：将已完成实例化，但是<code>未完成属性赋值和相关的初始化</code>的一个<code>不完整的 bean</code> 添加到三级缓存 singletonFactories 中</li><li><code>populateBean</code>(beanName, mbd, instanceWrapper)：对 bean 进行<code>属性填充注入</code></li><li><code>initializeBean</code>(beanName, exposedObject, mbd)：完成 bean 的属性填充注入后，<code>进一步初始化 </code>bean，在此过程中<code>产生代理对象</code>。此时 bean 的创建工作正式完成，已经可以在项目中使用了</li><li><code>registerDisposableBeanIfNecessary</code>(beanName, bean, mbd)：如果符合 bean 的销毁条件，则执行单例bean 的销毁工作</li></ul><p>####给bean设置销毁方法的方式</p><ul><li>通过 <code>xml</code> 文件配置 <code>destroy-method</code> 标签属性指定的 <code>destroy</code> 方法</li><li>通过注解 <code>@Bean</code> 可以使用属性指定销毁的方</li><li>实现 <code>DisposableBean</code> 接口</li><li>销毁方法名为接口情况下，有 <code>close</code> 或者 <code>shutdown</code> 方法</li></ul><h4 id="什么样的bean能被销毁"><a href="#什么样的bean能被销毁" class="headerlink" title="什么样的bean能被销毁"></a>什么样的bean能被销毁</h4><ul><li><code>bean</code> 的作用域是单例时</li><li>给 <code>bean</code> 设置了销毁方法或有 <code>DestructionAwareBeanPostProcessor</code> 实现类时</li></ul><p>详细：<a href="https://blog.csdn.net/weixin_38192427/article/details/116546600">Spring源码之bean的销毁registerDisposableBeanIfNecessary方法解读_桐花思雨的博客-CSDN博客</a></p><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><p>AOP(Aspect-Oriented Programming:面向切面编程)能够将那些与业务无关，却为业务模块所<code>共同调用的逻辑或责任</code>（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。</p><ul><li>Spring AOP就是<code>基于动态代理</code>的</li><li>如果要代理的对象，<code>实现了某个接口</code>，那么Spring AOP会使用<code>JDK Proxy</code>，</li><li>而对于<code>没有实现接口的对象</code>，这时候Spring AOP会使用 <code>Cglib </code>生成一个被代理对象的<code>子类</code>来作为代理。</li></ul><p>register<code>AspectJ</code>AnnotationAutoProxyCreatorIfNecessary</p><ul><li>第一句，<code>注册</code>一个AnnotationAwareAspectJAutoProxyCreator（称它为自动代理器），这个Creator是AOP的操作核心，也是扫描Bean，代理Bean的操作所在。</li><li>第二句，<code>解析配置元素</code>，决定代理的模式。其中有JDK动态代理，还有CGLIB代理，这部分后续会再细讲。</li><li>第三句，<code>作为系统组件</code>，把Creator这个Bean，放到Spring容器中。让Spring实例化，启动这个Creator。</li></ul><p>总结：</p><ul><li>Spring加载自动代理器<code>AnnotationAwareAspectJAutoProxyCreator</code>，当作一个系统组件。</li><li>当一个bean加载到Spring中时，会<code>触发自动代理器中的bean后置处理</code>，然后会先扫描bean中所有的Advisor</li><li>然后<code>用这些Adviosr和其他参数构建ProxyFactory</code></li><li>ProxyFactory会根据配置和目标对象的类型寻找代理的方式（JDK动态代理或CGLIG代理）</li><li>然后<code>代理出来的对象放回context中</code>，完成Spring AOP代理</li></ul><h2 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h2><p>SpringBoot是整合Spring技术栈的一站式框架</p><p>SpringBoot是简化Spring技术栈的快速开发脚手架</p><p><a href="https://www.yuque.com/atguigu/springboot/na3pfd">01、Spring与SpringBoot (yuque.com)</a></p><h3 id="Maven基础"><a href="#Maven基础" class="headerlink" title="Maven基础"></a>Maven基础</h3><p>apache下的一个项目管理软件，可以实现编译、打包等功能，也可以管理项目与项目之间的关系（依赖、继承、聚合）。</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>1.（POM）项目对象模型：maven工程的基本工作单元，是一个XML文件，包含了项目的基本信息，通过一段描述信息来进行管理构建。</p><p>2.坐标：maven寻找构件的依据，每个存在于maven中的依赖都具有唯一的坐标。通过<code>groupId</code>、<code>artifactId</code>、<code>version</code>、<code>packaging</code>、<code>classifier</code>几个标签来进行定义。</p><ul><li><p>groupId：往往定义项目的名称，通常格式为：org.组织名称.项目名称；</p></li><li><p>artifactId：项目模块名称，即我们通常说的project工程名称，是具体的应用名称；</p></li><li><p>version:当前项目所处的版本；</p></li><li><p>packaging: 项目的打包方式;非必填，默认为jar方式；</p></li><li><p>classifier：定义附属构建；项目除了可以生成主构件XXX.jar外，还可以通过一些插件生成XXX-sources.jar,XXX-doc.jar等附属构件，分别以源码的形式打包和文档的形式打包来做项目呈现；</p></li></ul><p>3.仓库</p><p>本地仓库</p><p>远程仓库：中央仓库、局域网私服仓库</p><p>4.父子工程和聚合工程</p><p>一个父模块下面多个子模块，<code>子模块与父模块</code>为继承关系，众多<code>子模块互相之间</code>为聚合关系。</p><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><h5 id="1-依赖的传递性："><a href="#1-依赖的传递性：" class="headerlink" title="1.依赖的传递性："></a>1.依赖的传递性：</h5><p>简易描述：项目一依赖了某个jar包；项目二依赖了项目一，那么项目二也自动依赖项目一的jar包。</p><h5 id="2-解决依赖冲突的两个默认原则"><a href="#2-解决依赖冲突的两个默认原则" class="headerlink" title="2.解决依赖冲突的两个默认原则"></a>2.解决依赖冲突的两个默认原则</h5><p>依赖冲突：项目中有存在多处对同一依赖的不同版本的引用，即坐标相同，版本号不同；</p><p>两个原则：</p><p>1.最短路径原则</p><p>比如A–B–C–D(2.0)和A–E–D(1.0),那么会使用1.0的D，因为路径更短。</p><p>2.最先声明原则</p><p>在pom中依赖声明的<code>顺序靠前</code>的依赖将被使用；</p><p>​    当<code>第一原则不适用</code>（冲突依赖的最短路径一致）的情况下，适用第二原则。第二原则是maven2.0.9定义的，目的是为了尽可能的避免构建的不确定性，在此版本之前第一原则不适用的场景下的依赖是不确定的。</p><h5 id="3-依赖的有效范围"><a href="#3-依赖的有效范围" class="headerlink" title="3.依赖的有效范围"></a>3.依赖的有效范围</h5><ul><li><p>compile（默认使用该依赖范围）：对于<code>编译 测试 运行</code>三种的classpath都有效</p></li><li><p>provided：于<code>编译和测试</code>classpath有效，但在<code>运行时无效</code>。典型的例子是servlet-api，<code>编译和测试项目的时候需要该依赖</code>，但在运行的时候，由于容器已经提供，就不需要maven重复地引入一遍。打包的时候可以不用包进去，别的设施会提供。</p></li><li><p>runtime：<code>运行时依赖范围</code>。使用此依赖范围的maven依赖，对于测试和运行classpath有效，但在编译主代码时无效。典型的例子是<code>JDBC驱动</code>实现，项目主代码的<code>编译只需要</code>jdk提供的<code>jdbc的接口</code>，只有在执行测试或者运行测试的时候才需要<code>实现上述接口的jdbc的驱动</code>。</p></li></ul><p>  System：</p><ul><li><p>test：只对于测试的classpath有效；</p></li><li><p>import:导入依赖范围。该依赖范围不会对三种classpath产生实际的影响。只有在dependencyManagement下才有效果。父子工程中，<code>父工程专门用作版本管理时，如果指定了scope=import,则子工程不可以再自行定义依赖的版本</code>，必须使用父工程指定的版本号；<code>dependencyManagement标签表示只是声明依赖，并不实际引入</code>，需要子项目显式的声明依赖。</p></li></ul><h4 id="项目打包类型"><a href="#项目打包类型" class="headerlink" title="项目打包类型"></a>项目打包类型</h4><p>如：<packaging>jar&lt;&#x2F; packaging&gt;</p><p>pom ———&gt; 父类型都为pom类型</p><p>jar ———&gt; 内部调用或者是作服务使用(默认为jar)</p><p>war ———&gt; 需要部署的项目(网络服务)</p><h4 id="MAVEN命令"><a href="#MAVEN命令" class="headerlink" title="MAVEN命令"></a>MAVEN命令</h4><p>clean:清除编译文件和打包文件</p><p>compile：生成编译文件，相当于javac命令</p><p>package：生成编译文件并生成打包文件，相当于java命令</p><p>install：生成编译文件和打包文件，相当于java命令；</p><p>deploy:如果想把打包文件放到私服仓库，需要执行deploy命令，用到的不多；</p><p>install和package的区别就是install会把打好的包部署到本地maven仓库。</p><h3 id="Spring生命周期监听"><a href="#Spring生命周期监听" class="headerlink" title="Spring生命周期监听"></a>Spring生命周期监听</h3><p>SpringApplicationRunListener:感知全阶段的生命周期（扩展了ApplicationListener接口）</p><p>1.引导：</p><p>​利用BootstrapContext引导整个项目启动</p><p>​starting：应用开始，SpringApplication的run方法一调用，只要有BootstrapContext就执行</p><p>​environmentPrepared：环境准备好（吧启动参数等绑定倒环境变量中），但是ioc还没有创建。（调一次）</p><p>2.启动</p><p>​contextPrepared：ioc容器创建并准备好，但是sources（主配置类）没加载，并关闭引导上下文；组件都没创建（调一次）</p><p>​contextLoaded：ioc容器加载，主配置类加载好了，但是ioc容器还没有刷新（bean没创建）</p><p>​&#x3D;&#x3D;截止之前，ioc容器还没产出bean&#x3D;&#x3D;</p><p>​started：ioc容器刷新了（所有bean造好了），但是runner没调用</p><p>​ready：ioc容器刷新了，所有runner调完了</p><p>3.运行</p><p>​之前步骤都正确执行，代表容器running</p><p>在starting之后的步骤中，只要出现错误，就会调用监听器的failed启动失败方法。</p><p><img src="C:\Users\15958\AppData\Roaming\Typora\typora-user-images\image-20230531151125184.png" alt="image-20230531151125184"></p><h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><p>如果项目启动前做事：BootstrapRegistyrInitializer和ApplicationContextInitializer</p><p>如果想要在项目启动完成后做事：ApplicatinoRunner和 CommandLineRunner</p><p>如果要干涉生命周期做事：SpringApplicationRunListener</p><p>如果要用事件机制：ApplicationListener</p><p><img src="C:\Users\15958\AppData\Roaming\Typora\typora-user-images\image-20230531155445969.png" alt="image-20230531155445969"></p><h3 id="Spring处理请求时发生了什么"><a href="#Spring处理请求时发生了什么" class="headerlink" title="Spring处理请求时发生了什么"></a>Spring处理请求时发生了什么</h3><p>在Spring Web应用程序中，当接收到一个HTTP请求时，通常会经过以下处理步骤：</p><ol><li>Web服务器接收到HTTP请求，并将请求转发给Spring的<code>DispatcherServlet</code>。</li><li>DispatcherServlet作为前端控制器，接收到请求后会进行初步的处理和解析，包括解析请求URL、请求参数、请求头等信息。</li><li>DispatcherServlet根据请求的URL路径找到对应的处理器（<code>Handler</code>），即Controller类或方法。</li><li>执行Controller中对应的方法，处理请求，并返回一个包含模型数据的<code>ModelAndView</code>对象（或其他类型的返回值）。</li><li>如果Controller方法需要进行数据绑定、校验等操作，会在此阶段进行。</li><li>根据返回的ModelAndView对象（或其他类型的返回值），DispatcherServlet选择合适的视图（View）进行<code>渲染</code>，通常是根据视图解析器（ViewResolver）来决定使用哪个视图。</li><li>视图进行渲染(<code>Thymeleaf</code>模板引擎)，并将渲染结果返回给DispatcherServlet。</li><li>DispatcherServlet将视图结果返回给Web服务器，Web服务器将其作为HTTP响应发送回客户端。</li></ol><p>在这个处理过程中，还可能涉及到拦截器（Interceptor）的调用、异常处理器（Exception Handler）的触发等其他处理环节，以提供更丰富的功能和灵活性。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="/2023/05/06/JVM/"/>
      <url>/2023/05/06/JVM/</url>
      
        <content type="html"><![CDATA[<h2 id="类文件"><a href="#类文件" class="headerlink" title="类文件"></a>类文件</h2><p>JVM可以理解的代码叫做<code>字节码</code>（扩展名为.class），不面向任何特定的处理器，只面向虚拟机。（跨平台的实现原理，不同的操作系统）。</p><p>结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ClassFile &#123;</span><br><span class="line">    u4             magic; <span class="comment">//Class 文件的标志确定这个文件是否为一个能被虚拟机接收的 Class 文件</span></span><br><span class="line">    u2             minor_version;<span class="comment">//Class 的小版本号</span></span><br><span class="line">    u2             major_version;<span class="comment">//Class 的大版本号javap -v可以查看类文件的版号信息 ，向上兼容</span></span><br><span class="line">    u2             constant_pool_count;<span class="comment">//常量池的数量</span></span><br><span class="line">    cp_info        constant_pool[constant_pool_count-<span class="number">1</span>];<span class="comment">//常量池主要存放两大常量：字面量和符号引用</span></span><br><span class="line">    u2             access_flags;<span class="comment">//Class 的访问标记</span></span><br><span class="line">    u2             this_class;<span class="comment">//当前类</span></span><br><span class="line">    u2             super_class;<span class="comment">//父类</span></span><br><span class="line">    u2             interfaces_count;<span class="comment">//接口</span></span><br><span class="line">    u2             interfaces[interfaces_count];<span class="comment">//一个类可以实现多个接口</span></span><br><span class="line">    u2             fields_count;<span class="comment">//Class 文件的字段属性</span></span><br><span class="line">    field_info     fields[fields_count];<span class="comment">//一个类会可以有个字段</span></span><br><span class="line">    u2             methods_count;<span class="comment">//Class 文件的方法数量</span></span><br><span class="line">    method_info    methods[methods_count];<span class="comment">//一个类可以有个多个方法</span></span><br><span class="line">    u2             attributes_count;<span class="comment">//此类的属性表中的属性数</span></span><br><span class="line">    attribute_info attributes[attributes_count];<span class="comment">//属性表集合</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###静态常量池</p><ul><li>字面量</li><li>符号引用<ul><li>类和接口的全限定名</li><li>字段的名称和描述符</li><li>方法的名称和描述符</li></ul></li><li>好处：常量池是为了避免频繁的创建和销毁对象而影响系统性能，其实现了<code>对象的共享</code>。</li></ul><h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><p>当<code>Class文件被加载</code>完成后，java虚拟机会将静态常量池里的内容<code>转移</code>到运行时常量池里，在静态常量池的符号引用有一部分是会被转变为<code>直接引用</code>的，比如说类的静态方法或私有方法，实例构造方法，父类方法，这是因为这些方法<code>不能被重写</code>其他版本，所以能在加载的时候就可以<code>将符号引用转变为直接引用</code>，而其他的一些方法是在这个方法被<code>第一次调用</code>的时候才会将符号引用转变为直接引用的。</p><h3 id="字符串常量池"><a href="#字符串常量池" class="headerlink" title="字符串常量池"></a>字符串常量池</h3><p>字符串常量池的存在使JVM提高了性能和减少了内存开销。</p><ul><li>每当我们使用<code>字面量</code>（String s&#x3D;“1”;）创建字符串常量时，JVM会首先检查字符串常量池，如果该字符串已经存在常量池中，那么就将<code>此字符串对象的地址赋值给引用s</code>（引用s在Java栈。如果字符串不存在常量池中，就会实例化该字符串并且将其放到常量池中，并将此<code>字符串对象的地址赋值</code>给引用s（引用s在Java栈中）。</li><li>每当我们使用关键字new（String s&#x3D;new String(”1”);）创建字符串常量时，JVM会首先检查字符串常量池，<code>如果该字符串已经存在常量池中，那么不再在字符串常量池创建该字符串对象，而直接堆中创建该对象的副本</code>，然后将堆中对象的地址赋值给引用s，如果字符串不存在常量池中，就会实例化该字符串并且将其放到常量池中，然后在堆中创建该对象的副本，然后将<code>堆中对象的地址赋值</code>给引用s。</li><li>如果需要将<code>new</code>创建的字符串对象放入字符串常量池中，可以使用<code>intern()</code>方法，它会检查字符串在常量池中是否存在，如果存在则返回常量池中的引用，如果不存在则将字符串添加到常量池中并返回引用。</li></ul><h2 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h2><p><img src="https://img-blog.csdnimg.cn/24506a0020724d209362cde9feea9103.png" alt="在这里插入图片描述"></p><p><strong>加载-验证-准备-解析-初始化</strong></p><p>jre是java运行环境，Java Runtime Environment</p><p>###加载</p><p>类加载过程的第一步，主要完成下面3件事情：</p><ul><li>通过<strong>全类名</strong>获取定义此类的<strong>二进制字节流</strong></li><li>将字节流所代表的<code>静态存储结构</code>转换为<code>方法区</code>的<code>运行时数据结构</code></li><li>在内存中生成一个代表该类的 Class 对象,作为方法区这些数据的访问入口</li></ul><p>####方法区、堆、栈</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a1938e1761cfb2a65e508eea54d9f487.png" alt="image-20200708094747667"></p><ol><li>Person.class 通过类加载子系统加载到JVM中</li><li>Person的类信息保存在方法区中</li><li>new Person() 实际的<code>对象数据保存在堆</code>中</li><li>Person p &#x3D; new Person(); p变量保存在java虚拟栈中占一个slot 指向了堆空间中实际的实例数据</li><li>堆空间中的实例数据中也保存了方法区中对象类型信息</li></ol><p>JDK8之后，方法区独立使用物理内存。</p><p>也就是说，方法区主要存放class，堆中主要存放实例化后的对象。</p><ul><li><p>方法区Method Area 和Heap一样,属于<code>多个线程共享的内存区域</code></p></li><li><p>方法区在<code>JVM启动的时候被创建</code>,物理内存空间也可以是不连续的,逻辑上连续</p></li><li><p>方法区的大小跟堆一样可以固定大小也可以动态扩展</p></li><li><p>方法区的大小决定系统了可以保存了多少类,如果<code>定义了太多类,会导致方法区溢出</code>,JVM也会报出OOM异常java.lang.OutofMemoryError：PermGen space 或者java.lang.OutOfMemoryError:Metaspace</p></li><li><p>出现OOM 方法区溢出主要以下几种情况</p><ul><li><p>加载了大量第三方jar包</p></li><li><p>Tomcat部署过多工程 30-50(Tomcat是一个免费的web服务器)</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d68612e080556634a602b192dc81c6dd.png" alt="img"></p></li><li><p>大量动态生成的反射类（反射就是加载类，解剖出类的各个组成部分）</p></li></ul></li><li><p>关闭JVM就会释放方法区的内存.方法区的生命周期与JVM相同</p></li></ul><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><ul><li>文件格式验证：主要验证Class文件<strong>是否规范</strong>等。</li><li>元数据验证：对字节码描述的信息<strong>语义分析</strong>等。</li><li>字节码验证：确保语义是ok的。</li><li>符号引用验证：确保解析动作能执行。</li></ul><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p><strong>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段</strong>，这些内存都将在方法区中分配。对于该阶段有以下几点需要注意：</p><ul><li>这时候进行内存分配的仅包括<strong>类变量</strong>（static），而不包括实例变量，<code>实例变量会在对象实例化时随着对象一块分配</code>在 Java 堆中,目前只是类加载的过程。</li><li>这里所设置的初始值”通常情况”下是数据类型默认的<strong>零值</strong>（如0、0L、null、false等），比如我们定义了<code>public static int value=111</code> ，那么 value 变量在<code>准备阶段的初始值就是0</code> 而不是111（初始化阶段才会复制）。特殊情况：比如给 value 变量加上了 <strong>fianl 关键字</strong><code>public static final int value=111</code> ，那么准备阶段 value 的值就被复制为 111。</li></ul><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>解析阶段是虚拟机将常量池内的<code>符号引用替换为直接引用</code>的过程，也就是得到类或者字段、方法在内存中的指针或者偏移量。</p><p>符号引用就只是名字，但是能够根据这个字符串定位到指定的数据，比如java&#x2F;lang&#x2F;StringBuilder，直接引用是一个内存指针。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>初始化是类加载的最后一步，也是真正执行类中定义的 <strong>Java 程序代码</strong>(字节码)，初始化阶段是执行<strong>类构造器</strong> <code>&lt;clinit&gt; ()</code>方法的过程。</p><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>默认提供三种类加载器,负责不同目录下的.class文件：</p><ul><li>BootstrapClassLoader(<code>启动类</code>加载器)：最顶层的加载类，由<code>C++</code>实现，负责加载 <code>%JAVA_HOME%/lib</code>目录下的jar包和类或者或被 <code>-Xbootclasspath</code>参数指定的路径中的所有类。</li><li>ExtensionClassLoader(<code>扩展类</code>加载器)：父加载器是<code>Bootstrap启动类加载器</code>(不是继承),主要负责加载目录 <code>%JRE_HOME%/lib/ext</code> 目录下的jar包和类，或被 <code>java.ext.dirs</code> 系统变量所指定的路径下的jar包。</li><li>AppClassLoader(<code>应用程序类</code>加载器)：父加载器是<code>ExtClassLoader扩展类加载器</code>（注: 不是继承关系），对应加载的应用程序<code>classpath</code>目录下的所有jar和class等</li></ul><p>AppClassLoader和ExtClassLoader都实现了抽象类ClassLoader。 抽象类ClassLoader有一个<code>字段parent</code>, AppClassLoader和ExtClassLoader通过设置该字段引用,指定父加载器。（是组合关系）</p><p>AppClassLoader 的parent指向 ExtClassLoader,ExtClassLoader 的parent指向 null,(null的原因是因为Bootstrap是C++实现的,通过代码中<code>逻辑判断</code>来转向Bootstrap)</p><p>自定义类加载器是为了加载在jvm三个加载器负责的目录范围之外的类</p><p>AppClassLoader和ExtClassLoader是Launcher的静态内部类，在程序启动时JVM会创建Launcher对象，Launcher构造器会同时会创建扩展类加载器和应用类加载器。</p><h3 id="双亲委派"><a href="#双亲委派" class="headerlink" title="双亲委派"></a>双亲委派</h3><p>每一个类都有一个对应它的类加载器。系统中的 ClassLoder 在协同工作的时候会默认使用双亲委派模型。即在类加载的时候，系统会<code>首先判断当前类是否被加载过</code>。已经被加载的类会直接返回，否则才会尝试加载。加载的时候，首先会把该请求委派给<code>父类加载器</code>的 loadClass() 处理，因此所有的请求最终都应该传送到顶层的启动类加载器BootstrapClassLoader中。<code>当父类加载器无法处理时，才由自己来处理</code>。当父类加载器为null时，会使用启动类加载器 BootstrapClassLoader作为父类加载器。如果当前类加载器和所有父类加载器都无法加载该类时，则会抛出ClassNotFoundException异常。</p><p><img src="https://camo.githubusercontent.com/e1bcf49e6a732e8f66e1cce576661402f213b8f94471bba6ce41b34d24569964/68747470733a2f2f67697465652e636f6d2f647265616d63617465722f626c6f672d696d672f7261772f6d61737465722f755069632f2545372542312542422545352538412541302545382542442542442545352539392541382d5a31576446742e706e67" alt="类加载器"></p><p>双亲委派模型保证了Java程序的稳定运行，可以<code>避免类的重复加载</code>，也保证了 Java 的核心 API 不被篡改。如果没有使用双亲委派模型，而是每个类加载器加载自己的话就会出现一些问题，比如我们编写一个称为 <code>java.lang.Object</code> 类的话，那么程序运行的时候，系统就会出现多个不同的 <code>Object</code> 类。</p><h3 id="什么时候需要类加载步骤中的加载"><a href="#什么时候需要类加载步骤中的加载" class="headerlink" title="什么时候需要类加载步骤中的加载"></a>什么时候需要类加载步骤中的加载</h3><p>遇到<code>new</code>、<code>getstatic</code>、<code>putstatic</code>或<code>invokestatic</code>这4条字节码指令时，如果类没有进行过初始化，则需要先触发其初始化。生成这4条指令的最常见的Java代码场景是：</p><ol><li>使用new关键字<code>实例化</code>对象的时候、读取或设置一个类的<code>静态字段</code>（被final修饰、已在编译期把结果放入常量池的静态字段除外）的时候，以及调用一个类的<code>静态方法</code>的时候。</li><li>使用java.lang.reflect包的方法对类进行<code>反射调用</code>的时候，如果<code>类没有进行过初始化</code>，则需要先触发其初始化。</li><li>当初始化一个类的时候，如果发现其<code>父类还没有进行过初始化</code>，则需要先触发其父类的初始化。</li><li>当<code>虚拟机启动</code>时，用户需要指定一个要<code>执行的主类</code>（包含main（）方法的那个类），虚拟机会先初始化这个主类。</li></ol><p>###打破双亲委派模型</p><p>重写ClassLoader类的loadClass()方法</p><p>##JVM内存区域</p><center class="half">    <img src="https://camo.githubusercontent.com/153b69e2d97ae1082e80014c90b907c6d7fbdda99a888c6e1cb0a56d55ee4f87/68747470733a2f2f67697465652e636f6d2f647265616d63617465722f626c6f672d696d672f7261772f6d61737465722f755069632f4a564d2545352538362538352545352541442539382545362541382541312545352539452538422d312e382545342542392538422545352538392538442d454b766847422e706e67" alt="JVM内存模型-1.8之前" style="zoom:50%;" width=1100 />    <img src="https://camo.githubusercontent.com/916309426f20ab1c0ed42dd6f345ac99b4b5f64f70a98b9e4665394e35cb57b3/68747470733a2f2f67697465652e636f6d2f647265616d63617465722f626c6f672d696d672f7261772f6d61737465722f755069632f4a564d2545352538362538352545352541442539382545362541382541312545352539452538422d312e382d7939584e6c542e706e67" alt="JVM内存模型-1.8" style="zoom:50%;" width=1100 /></center><p>总体来说，粗略的分为<strong>堆和栈</strong>，那么<code>栈是线程私有的</code>，而<code>堆是线程共享的</code>。那么<strong>栈</strong>又分为<code>程序计数器</code>，<code>虚拟机栈</code>，<code>本地方法栈</code>。</p><p>堆稍后再说，当然还有<strong>方法区</strong>，稍后单独说.</p><p>###程序计数器</p><ul><li>字节码解释器通过改变程序计数器来<code>依次读取指令</code>，从而实现代码的<code>流程控制</code>，如：顺序执行、选择、循环、异常处理。</li><li>在<code>多线程</code>的情况下，程序计数器用于<code>记录当前线程执行的位置</code>，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。</li><li><strong>程序计数器是唯一一个不会出现 OutOfMemoryError 的内存区域</strong>，它的<code>生命周期随着线程</code>的创建而创建，随着线程的结束而死亡</li></ul><p>###虚拟机栈</p><p>每个线程在创建时都会创建一个虚拟机栈，其内部保存一个个的栈帧（Stack Frame），对应着一次次的Java方法调用，是线程私有的。</p><p>每个方法执行，伴随着进栈;方法执行结束后，伴随着出栈。</p><p>可以使用参数 -Xss选项来设置线程的最大栈空间，栈的大小直接决定了函数调用的最大可达深度。</p><ul><li>说白了，通俗的讲，主要是对象中的方法产生的各种”材料”。</li><li>因此，虚拟机栈存放的是<code>局部变量表、操作数栈、动态链接、方法出口</code>。</li><li>局部变量表存8大基本数据类型以及引用类型。</li><li>当然，栈也会非常error：<ul><li><strong>StackOverFlowError</strong>： 若 J<strong>ava 虚拟机栈的内存大小不允许动态扩展</strong>，<strong>那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度的时候</strong>，就抛出 StackOverFlowError 异常。</li><li><strong>OutOfMemoryError</strong>：若 <strong>Java 虚拟机栈的内存大小允许动态扩展</strong>，<strong>且当线程请求栈时内存用完了</strong>，<strong>无法再动态扩展了</strong>，此时抛出 OutOfMemoryError 异常。</li></ul></li></ul><img src="https://img-blog.csdnimg.cn/20210810103055167.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjg0MDA1,size_16,color_FFFFFF,t_70" alt="img" style="zoom: 67%;" /><p>###本地方法栈</p><p>虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 <code>Native</code> 方法服务。</p><p>###方法区</p><p><strong>方法区与 Java 堆一样，是各个线程<code>共享</code>的内存区域</strong>，它用于存储已被虚拟机加载的<code>类信息</code>、<code>常量</code>、<code>静态变量</code>、即时编译器编译后的代码等数据。不过随着版本的变化，会发生变化。</p><h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><p><strong>直接内存</strong>并不是虚拟机运行时数据区的一部分，也不是虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用。而且也可能导致 OutOfMemoryError 异常出现（如<strong>DirectByteBuffer</strong>）。本机直接内存的分配不会受到 Java 堆的限制，但是，既然是内存就会受到<code>本机总内存大小以及处理器寻址空间</code>的限制。</p><p>###堆</p><p>此内存区域的唯一目的就是<code>存放对象实例</code>，几乎所有的对象实例以及数组都在这里分配内存。</p><ul><li>分为四区，分别为<code>eden区、s0(&quot;From)区、s1(&quot;To&quot;)和tentired</code></li><li>在初始阶段，新创建的对象被分配到Eden区，survivor的两块空间都为空。</li><li>当<code>Eden区满</code>了的时候，<code>minor GC</code>触发</li><li>经过扫描与标记，存活的对象被复制到<code>S0</code>，不存活的对象被回收</li><li>在下一次的Minor GC中，Eden区的情况和上面一致，没有引用的对象被回收，存活的对象被复制到survivor区。然而在survivor区，<code>S0的所有的数据都被复制到S1</code>，需要注意的是，在上次minor GC过程中移动到S0中的相同存活的对象在复制到S1后其<code>年龄要加1</code>。此时Eden区S0区被清空，所有存活的数据都复制到了S1区，并且<code>S1区存在着年龄不一样的对象</code>（重点）</li><li>再下一次MinorGC则重复这个过程，这一次survivor的<code>两个区对换</code>，存活的对象被复制到S0，<code>存活的对象年龄加1</code>，Eden区和另一个survivor区被清空。</li></ul><p>##GC-JAVA垃圾回收机制</p><p>###1.GC是什么</p><p>JVM垃圾收集(Java Garbage Collection )，程序运行时，内存空间是有限的，那么如何及时的把不再使用的对象清除将内存释放出来，这就是GC要做的事。</p><p>GC采用分代收集算法：</p><ul><li><p>次数上频繁收集Young区（新生代：Eden、From、To）</p></li><li><p>次数上较少收集Old区（老年代）</p></li><li><p>基本不动Perm区</p></li></ul><p>####1.GC的区域</p><p>jvm 中，程序计数器、虚拟机栈、本地方法栈都是随线程而生随线程而灭（线程私有区），栈帧随着方法的进入和退出做入栈和出栈操作，实现了自动的内存清理，因此，我们的内存垃圾回收主要集中于 java <strong>堆</strong>和<strong>方法区</strong>中（线程共享区），在程序运行期间，这部分内存的分配和使用都是动态的。</p><h4 id="2-GC的对象"><a href="#2-GC的对象" class="headerlink" title="2.GC的对象"></a>2.GC的对象</h4><p>需要进行回收的对象就是已经没有存活的对象，判断一个对象是否存活常用的有两种办法：引用计数和可达分析。</p><p>1）、<code>引用计数</code>：每个对象有一个<code>引用计数属性</code>，新增一个引用时计数加1，引用释放时计数减1，计数为0时可以回收。此方法简单，<code>无法解决</code>对象<code>相互循环引用</code>的问题。</p><p>2）、<code>可达性分析</code>（Reachability Analysis）：从<code>GC Roots</code>开始向下搜索，搜索所走过的路径称为引用链。当一个对象到GC Roots<code>没有任何引用链相连</code>时，则证明此对象是<code>不可用</code>的。不可达对象不等价于可回收对象， 不可达对象变为可回收对象至少要经过两次标记过程 ，两次标记后仍然是可回收对象，则将面临回收。</p><p>在Java语言中，GC Roots包括：</p><p><code>虚拟机栈中引用的对象</code>；方法区中<code>类静态属性实体引用的对象</code>；方法区中<code>常量引用的对象</code>；本地方法栈中<code>JNI（JAVA本地接口）引用的对象</code>。</p><h5 id="如何枚举根节点"><a href="#如何枚举根节点" class="headerlink" title="如何枚举根节点"></a>如何枚举根节点</h5><p>在HotSpot的实现中，是使用一组称为<code>OopMap</code>的数据结构来达到这个目的的，在<code>类加载完成的时候</code>，HotSpot就把对象内什么偏移量是什么类型的数据计算出来，在JIT编译过程中，也会在特定的位置记录下栈和寄存器中哪些位置是引用。这样，GC在扫描时就可以直接得到信息了。<code>但是</code>，可能导致引用关系变化，或者说OopMap内容变化的指令非常多，如果为每一条指令都生成对应的OopMap，那么会需要大量的额外空间，这样GC<code>成本很高</code>，<code>安全点</code>由此而来。</p><p>在JIT<code>编译</code>过程中，在<code>特定的位置</code>记录下栈和寄存器<code>哪些位置是引用</code>，实际上这些位置就是安全点，意思就是说，程序执行时并非在所有地方都能停顿下来开始GC，<code>只有在达到安全点时才能暂停</code>。</p><p>Safepoint机制保证了程序执行时，在不太长的时间内就会遇到可进入GC的Safepoint，但如果线程处于<code>Sleep或者Blocked</code>状态，这时候<code>线程无法响应</code>JVM的中断请求，JVM也显然不太可能等待线程重新被分配CPU时间，这种情况就需要<code>安全域</code>来解决。安全域是指在<code>一段代码片段中，引用关系不会发生变化</code>。在这个区域中的<code>任意地方开始GC都是安全的</code>。这时候安全点就被扩展到了Safe Region。</p><p>####3.什么时候GC</p><p>1）、程序调用System.gc时可以触发</p><p>2）、系统自身来决定GC触发的时机（根据Eden区和From Space区的内存大小来决定。当内存大小不足时，则会启动GC线程并停止应用线程）</p><p>GC又分为 minor GC 和 Full GC (也称为 Major GC )：</p><p><strong>Minor GC触发条件：</strong>当Eden区满时，触发Minor GC。</p><p><strong>Full GC触发条件：</strong></p><p> a.调用System.gc时，系统建议执行Full GC，但是不必然执行</p><p> b.老年代空间不足</p><p> c.方法区空间不足</p><p> d.通过Minor GC后进入老年代的平均大小大于老年代的可用内存（老年代满了）</p><p> e.由Eden区、From Space区向To Space区复制时，对象大小大于To Space可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小</p><h4 id="4-GC做了什么、垃圾收集器"><a href="#4-GC做了什么、垃圾收集器" class="headerlink" title="4.GC做了什么、垃圾收集器"></a>4.GC做了什么、垃圾收集器</h4><p> 主要做了清理对象，整理内存的工作。Java堆分为新生代和老年代，采用了不同的回收方式。</p><img src="https://camo.githubusercontent.com/761860e520e603bad124ae1473bae185b1615a5c7c1d40d7178b83c63003675a/68747470733a2f2f67697465652e636f6d2f647265616d63617465722f626c6f672d696d672f7261772f6d61737465722f755069632f2545352539452538332545352539432542452545352539422539452545362539342542362545352539392541382d44535652414f2e706e67" alt="垃圾回收器-DSVRAO" style="zoom:50%;" /><h5 id="串行垃圾收集器："><a href="#串行垃圾收集器：" class="headerlink" title="串行垃圾收集器："></a>串行垃圾收集器：</h5><p>使用单线程进行垃圾回收，垃圾回收时，只有一个线程在工作，并且java应用中的<code>所有线程都要暂停</code>，等待垃圾回收的完成。这种现象称之为<code>STW（Stop-The-World）</code>。</p><h5 id="并行垃圾收集器："><a href="#并行垃圾收集器：" class="headerlink" title="并行垃圾收集器："></a>并行垃圾收集器：</h5><p>将单线程改为了多线程进行垃圾回收，并行垃圾收集器在收集的过程中也会暂停应用程序，这个和串行垃圾回收器是一样的，只是并行执行，<code>速度更快些</code>，<code>暂停的时间更短一些</code>。</p><h5 id="CMS-Concurrent-Mark-Sweep-垃圾收集器："><a href="#CMS-Concurrent-Mark-Sweep-垃圾收集器：" class="headerlink" title="CMS(Concurrent Mark Sweep)垃圾收集器："></a>CMS(Concurrent Mark Sweep)垃圾收集器：</h5><p>一种以获取<code>最短回收停顿时间</code>为目标的收集器。它非常符合在注重用户体验的应用上使用。是 HotSpot 虚拟机(一款JAVA虚拟机)第一款真正意义上的<code>并发收集器</code>，它第一次实现了让<code>垃圾收集线程与用户线程（基本上）同时工作</code>。</p><p>从名字中的<strong>Mark Sweep</strong>这两个词可以看出，CMS 收集器是一种 “<code>标记-清除</code>”算法实现的，它的运作过程相比于前面几种垃圾收集器来说更加复杂一些。整个过程分为四个步骤：</p><ul><li>初始标记：<code>暂停所有的其他线程</code>，并<code>记录</code>下直接与 root 相连的对象，速度很快 ；</li><li>并发标记：<code>同时开启 GC 和用户线程</code>，用一个闭包结构去<code>记录可达对象</code>。但在这个阶段结束，这个闭包结构并<code>不能保证包含当前所有</code>的可达对象。因为用户线程可能会不断的更新引用域，所以 GC 线程<code>无法保证可达性分析的实时性</code>。所以这个算法里会跟踪记录这些发生引用更新的地方。</li><li>重新标记：重新标记阶段就是为了<code>修正</code>并发标记期间因为<code>用户程序继续运行</code>而<code>导致标记产生变动</code>的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段的时间稍长，远远比并发标记阶段时间短</li><li>并发清除：<code>开启用户</code>线程，同时 GC 线程开始对为<code>标记的区域做清扫</code>。</li></ul><p>优点：<code>并发收集、低停顿</code></p><p>缺点：</p><ul><li>对 CPU 资源敏感；</li><li>无法处理浮动垃圾；</li><li>它使用的回收算法-“标记-清除”算法会导致收集结束时会有大量<code>空间碎片</code>产生。</li></ul><h5 id="G1"><a href="#G1" class="headerlink" title="G1"></a>G1</h5><p>争对CMS缺点提出</p><ul><li>将整个Java堆划分为多个<code>大小相等</code>的独立区域（Region），虽然还保留新生代和老年代的概念，但<code>新生代和老年代不再是物理隔离</code>的了，而都是一部分Region（不需要连续）的<code>集合</code></li><li>并行与并发： G1 能充分利用 CPU、多核环境下的硬件优势，使用<code>多个 CPU</code>来<code>缩短 Stop-The-World 停顿时间</code>。</li><li><code>分代</code>收集：虽然 G1 可以不需要其他收集器配合就能<code>独立管理</code>整个 GC 堆，但是还是保留了分代的概念。</li><li>空间整合：G1 从<code>整体</code>来看是基于“<code>标记整理</code>”算法实现的收集器；从<code>局部</code>上来看是基于“<code>复制</code>”算法实现的。</li><li><code>可预测停顿</code>：这是 G1 相对于 CMS 的另一个大优势，降低停顿时间是 G1 和 CMS 共同的关注点，但 G1 除了追求低停顿外，还能建立可预测的停顿时间模型。G1跟踪各个Region里面的<code>垃圾堆积的价值大小</code>（回收所获得的空间大小以及回收所需要时间的经验值），在后台<code>维护一个优先列表</code>，每次根据允许的收集时间，<code>优先回收价值最大的Region</code>。</li></ul><h6 id="跨代引用"><a href="#跨代引用" class="headerlink" title="跨代引用"></a>跨代引用</h6><p>在G1收集器中，Region之间的<code>对象引用</code>以及其他收集器中的新生代与老年代之间的对象引用，虚拟机都是使用<code>Remembered Set</code>（RS）来<code>避免全堆扫描</code>的。G1中<code>每个Region都有一个与之对应的RS</code>，虚拟机发现程序对<code>Reference</code>类型的数据进行<code>写操作</code>时，会产生一个<code>Write Barrier</code>暂时中断操作，<code>检查</code>Reference<code>引用的对象</code>是否处于<code>不同的Region之间</code>（在分代的例子中就是检查是否老年代中的对象引用了新生代中方的对象）如果是，便通过<code>CardTable</code>（每个Region块又细分了2000多个卡表，记录一波我引用了哪个对象）把<code>相关引用信息记录</code>到<code>被引用对象</code>所属的Region的RS之中。当进行内存回收时，在GC根节点的枚举范围中加入RS即可保证不对全堆扫描，也不会又遗漏。</p><h6 id="四个过程"><a href="#四个过程" class="headerlink" title="四个过程"></a>四个过程</h6><ul><li>初始标记：仅仅只是<code>标记</code>一下GC Roots 能<code>直接关联</code>到的对象，并且修改<code>TAMS（Nest Top Mark Start）</code>的值，让下一阶段用户程序并发运行时，能在正确可以的Region中创建对象，此阶段需要停顿线程，但耗时很短。</li><li>并发标记：从GC Root 开始对堆中对象进行<code>可达性分析</code>，找到存活对象，此阶段耗时较长，但<code>可与用户程序并发执行</code>。</li><li>最终标记：为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在<code>线程</code>的<code>Remembered Set Logs</code>里面，最终标记阶段需要把Remembered Set Logs的<code>数据合并</code>到Remembered Set中，这阶段需要停顿线程，但是可并行执行。</li><li>筛选回收：首先对各个Region中的<code>回收价值和成本进行排序</code>，根据用户所期望的GC 停顿是时间来制定回收计划。此阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分Region，时间是用户可控制的，而且<code>停顿</code>用户线程将<code>大幅度提高收集效率</code>。</li></ul><h5 id="G1与CMS的比较"><a href="#G1与CMS的比较" class="headerlink" title="G1与CMS的比较"></a>G1与CMS的比较</h5><ol><li>CMS收集器是获取最短回收停顿时间为目标的收集器，因为CMS工作时，GC工作线程与用户线程可以并发执行，以此来达到降低收集停顿时间的目的（只有初始标记和重新标记会STW）。但是<code>CMS</code>收集器对CPU资源非常敏感。在并发阶段，虽然不会导致用户线程停顿，但是会<code>占用CPU资源而导致引用程序变慢</code>，总吞吐量下降。</li><li><code>CMS仅作用于老年代</code>，是基于标记清除算法，所以清理的过程中会有大量的<code>空间碎片</code>。</li><li>CMS收集器无法处理<code>浮动垃圾</code>，由于CMS并发清理阶段用户线程还在运行，伴随程序的运行自然会有<code>新的垃圾不断产生</code>，这一部分垃圾出现在标记过程之后，CMS无法在本次收集中处理它们，只好<code>留在下一次GC</code>时将其清理掉。</li><li><code>G1</code>是一款<code>面向服务端</code>应用的垃圾收集器，适用于多核处理器、大内存容量的服务端系统。G1能充分利用CPU、<code>多核</code>环境下的硬件优势，使用多个CPU或核心来缩短STW的停顿时间，它满足短时间停顿的同时达到一个高的吞吐量。</li><li>从<code>JDK 9</code>开始，<code>G1成为默认的垃圾回收器</code>。当应用有以下任何一种特性时非常适合用G1：<code>Full GC持续时间太长或者太频繁</code>；<code>对象的创建速率和存活率变动很大</code>；<code>应用不希望停顿时间长(长于0.5s甚至1s)</code>。</li><li>G1将空间划分成很多块（Region），然后他们各自进行回收。堆比较大的时候可以采用，采用复制算法，碎片化问题不严重。<code>整体上看属于标记整理算法,局部(region之间)属于复制算法</code>。</li><li>G1 需要记忆集 (具体来说是卡表)来记录新生代和老年代之间的引用关系，这种数据结构在 G1 中需要<code>占用大量的内存</code>，可能达到整个堆内存容量的 20% 甚至更多。而且 G1 中维护记忆集的成本较高，带来了更高的执行负载，影响效率。所以 <code>CMS 在小内存应用上的表现要优于 G1</code>，而<code>大内存应用上 G1 更有优势，大小内存的界限是6GB到8GB</code></li></ol><p>###2.GC算法</p><p><code>标记-清除算法</code>：</p><p>为每个对象存储一个标记位，记录对象的状态（活着或是死亡）。分为两个阶段，一个是标记阶段，这个阶段内，为每个对象更新标记位，检查对象是否死亡；第二个阶段是清除阶段，该阶段对死亡的对象进行清除，执行 GC 操作。</p><p>优缺点：只需要找到一个引用即可，缺点是<code>效率比较低</code>，每个活着的对象都要在标记阶段遍历一遍；所有对象都要在清除阶段扫描一遍。可能出现很多<code>碎片空间</code>无法利用的情况。</p><p><code>标记-压缩算法</code>（标记-整理）：</p><p>是标记-清除法的一个改进版。在第二个阶段，该算法并<code>没有直接</code>对死亡的对象进行<code>清理</code>，而是将所有<code>存活的对象整理</code>一下，放到另一处空间，然后把剩下的所有对象全部清除。</p><p>优缺点：不会产生大量的碎片空间。效率较低。</p><p><code>复制算法</code>：</p><p>将内存平均分成两部分，然后每次只使用其中的一部分，当这部分<code>内存满的时候</code>，将内存中所有<code>存活的对象</code>复制到<code>另一个内存</code>中，然后将<code>之前的内存清空</code>，只使用这部分内存，循环下去。</p><p>优缺点：没有内存碎片；可用内存空间只有一半。适用于对象死亡快的场景。</p><p>目前主流的是<code>分代收集算法</code>：</p><p>现在的虚拟机垃圾收集大多采用这种方式，它根据对象的生存周期，将堆分为新生代(Young)和老年代(Tenure)。在新生代中，由于对象生存期短，每次回收都会有大量对象死去，那么这时就采用复制算法。老年代里的对象存活率较高，没有额外的空间进行分配担保，所以可以使用标记-整理 或者 标记-清除。</p><p>当系统创建一个对象的时候，总是在Eden区操作，当这个区满了，那么就会触发一次YoungGC，也就是年轻代的垃圾回收。一般来说这时候不是所有的对象都没用了，所以就会把还能用的对象复制到From区。 这样整个Eden区就被清理干净了，可以继续创建新的对象，当Eden区再次被用完，就再触发一次YoungGC，然后呢，注意，这个时候跟刚才稍稍有点区别。这次触发YoungGC后，会将Eden区与From区还在被使用的对象复制到To区。再下一次YoungGC的时候，则是将Eden区与To区中的还在被使用的对象复制到From区。经过若干次YoungGC后，有些对象在From与To之间来回游荡，这时候From区与To区亮出了底线（阈值），这些家伙要是到现在还没挂掉，对不起，一起滚到（复制）老年代吧。 老年代经过这么几次折腾，也就扛不住了（空间被用完），好，那就来次集体大扫除（<em>Full GC</em>），也就是全量回收。如果Full GC使用太频繁的话，无疑会对系统性能产生很大的影响。所以要合理设置年轻代与老年代的大小，尽量减少Full GC的操作。</p><h3 id="3-Minor-GC和Full-GC"><a href="#3-Minor-GC和Full-GC" class="headerlink" title="3.Minor GC和Full GC"></a>3.Minor GC和Full GC</h3><ul><li>Minor GC触发条件：当<code>Eden区满</code>时，触发Minor GC。</li><li>Full GC触发条件：<ol><li>调用<code>System.gc</code>时，系统建议执行Full GC，但是<code>不必然执行</code></li><li><code>老年代</code>空间不足</li><li><code>方法区</code>空间不足</li><li>通过<code>Minor GC后</code>进入<code>老年代的平均大小</code>大于老年代的可用内存</li><li>由Eden区、From Space区向To Space区复制时，对象大小大于To Space可用内存，则把该<code>对象转存到老年代</code>，且老年代的<code>可用内存小</code>于该对象大小</li></ol></li></ul><h2 id="对象创建过程"><a href="#对象创建过程" class="headerlink" title="对象创建过程"></a>对象创建过程</h2><p><img src="https://camo.githubusercontent.com/a905ad4498d3d0837e9dcc1c23341d8137d77336dc2bf2b32abd69a70a14f49b/68747470733a2f2f67697465652e636f6d2f647265616d63617465722f626c6f672d696d672f7261772f6d61737465722f755069632f4a6176612545352538382539422545352542422542412545352541462542392545382542312541312545372539412538342545382542462538372545372541382538422d6643307752622e706e67" alt="img"></p><p>类加载–分配内存–初始化零值–设置对象头–执行init方法</p><p>###创建</p><p>####类加载检查</p><p>虚拟机遇到一条 new 指令时，首先将去检查这个指令的参数是否能在常量池中定位到这个类的<code>符号引用</code>，并且检查这个符号引用代表的类是否已被<code>加载过、解析和初始化过</code>。如果没有，那必须先执行相应的类加载过程。</p><p>####分配内存</p><p>在类加载检查通过后，接下来虚拟机将为新生对象分配内存。对象所需的内存大小在类加载完成后便可确定，为对象分配空间的任务等同于<code>把一块确定大小的内存从 Java 堆中划分出来</code>。分配方式有 “指针碰撞” 和 “空闲列表” 两种，选择那种分配方式由 Java 堆是否<code>规整</code>决定，而 Java 堆是否规整又由所采用的<code>垃圾收集器</code>是否带有<code>压缩整理功能</code>决定。</p><ul><li><p>指针碰撞</p><p>如果Java堆中内存是<code>绝对规整</code>的，所有被使用过的的内存都被放到一边，空闲的内存放到另外一边，中间放着一个<code>指针</code>作为<code>分界点的指示器</code>，所分配内存仅仅是把那个<code>指针</code>向空闲空间方向<code>挪动一段与对象大小相等的实例</code>，这种分配方式就是指针碰撞</p><ul><li>堆规整（没有内存碎片）</li><li>复制算法</li><li>GC：Serial、ParNew</li></ul></li><li><p>空闲列表</p><p>如果Java堆内存中的内存并不是规整的，已被使用的内存和空闲的内存<code>相互交错</code>在一起，不可以进行指针碰撞啦，虚拟机必须<code>维护一个列表</code>，记录哪些内存是可用的，在分配的时候从列表<code>找到一块大的空间</code>分配给对象实例，并<code>更新列表</code>上的记录，这种分配方式就是空闲列表</p><p>可能存在<code>线性安全</code>问题。如果一个线程正在给A对象分配内存，指针还没有来的及修改，同时另一个为B对象分配内存的线程，仍引用这之前的指针指向，这就出问题了。</p><ul><li>堆内存不规整的情况下</li><li>虚拟机会维护一个列表，该列表会记录哪些内存块是可用的，在分配的时候，找一块儿足够大的内存块来划分给对象实例，最后更新列表记录</li><li>GC：CMS</li></ul></li><li><p>并发问题</p><ul><li>CAS+失败重试： CAS 是乐观锁的一种实现方式。所谓乐观锁就是，每次不加锁而是<code>假设没有冲突</code>而去完成某项操作，如果因为冲突<code>失败就重试</code>，直到成功为止。虚拟机采用 CAS 配上失败重试的方式保证<code>更新操作的原子性</code>。</li><li>TLAB： 为每一个线程<code>预先</code>在 Eden 区<code>分配一块儿内存</code>，JVM 在给线程中的对象分配内存时，首先在 TLAB 分配，当对象大于 TLAB 中的剩余内存或 TLAB 的<code>内存已用尽</code>时，再采用上述的<code>CAS</code>进行内存分配</li></ul></li></ul><p>####初始化零值</p><p>内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头），这一步操作保证了对象的实例字段在 Java 代码中可以<code>不赋初始值就直接使用</code>，程序能访问到这些字段的数据类型所对应的零值。</p><p>####设置对象头</p><p>初始化零值完成之后，虚拟机要对对象进行必要的设置，例如这个对象是那个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄等信息。 这些信息存放在对象头中。 另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。</p><p>####指向init方法</p><p>在上面工作都完成之后，从虚拟机的视角来看，一个新的对象已经产生了，但从 Java 程序的视角来看，对象创建才刚开始，方法还没有执行，所有的字段都还为零。所以一般来说，执行 new 指令之后会接着执行方法，把对象按照<code>程序员</code>的意愿进行<code>初始化</code>，这样一个真正可用的对象才算完全产生出来。</p><h3 id="内存布局"><a href="#内存布局" class="headerlink" title="内存布局"></a>内存布局</h3><p>JVM内存布局规定了Java在运行过程中内存申请、分配、管理的策略，保证了JVM的稳定高效运行。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/A0bYOQcma0PGgLpviaZ3JSMwUWoVZoYKBPy0wwA5HlI9q8UJoYBQf747KkKMtrIkZpeVlhfC6zYutBUUrJHQvrA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>内存布局分别为对象头，实例数据，对其填充</p><h4 id="对象头"><a href="#对象头" class="headerlink" title="对象头"></a>对象头</h4><p>Hotspot 虚拟机的对象头包括两部分信息，第一部分用于存储对象自身的自身<code>运行时数据</code>（哈希码、GC 分代年龄、锁状态标志等等），另一部分是<code>类型指针</code>，即对象指向它的类元数据的指针，虚拟机通过这个指针来<code>确定这个对象是哪个类的实例</code>。</p><p>####实例数据</p><p>实例数据部分是对象真正存储的<code>有效信息</code>，也是在程序中所定义的<code>各种类型的字段内容</code>。</p><p>####对其填充</p><p>对齐填充部分不是必然存在的，也没有什么特别的含义，仅仅起<code>占位作用</code>。 因为 Hotspot 虚拟机的自动内存管理系统要求对象起始地址必须是 8 字节的整数倍，换句话说就是对象的大小必须是 8 字节的整数倍。而对象头部分正好是 8 字节的倍数（1 倍或 2 倍），因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。</p><p>####对象访问方式</p><p>#####1.句柄</p><p><img src="https://camo.githubusercontent.com/3501cb34812d6129ac468b95bf34579a76dcf5cb0fac5c22810bef4e96320c40/68747470733a2f2f67697465652e636f6d2f647265616d63617465722f626c6f672d696d672f7261772f6d61737465722f755069632f2545342542442542462545372539342541382545352538462541352545362539462538342d6634437739782e706e67" alt="使用句柄-f4Cw9x"></p><p>如果使用句柄的话，那么 Java 堆中将会划分出一块内存来作为<code>句柄池</code>，reference 中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息；也就是多了一步。</p><p>#####2.直接指针</p><p><img src="https://camo.githubusercontent.com/d584f6dda010a7bae95b34af5d39b00b4baf6b86dadfd21bc59cd80638f3263c/68747470733a2f2f67697465652e636f6d2f647265616d63617465722f626c6f672d696d672f7261772f6d61737465722f755069632f2545372539422542342545362538452541352545362538432538372545392539322538382d386d3348487a2e706e67" alt="直接指针-8m3HHz">如果使用直接指针访问，那么 Java 堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，而 reference 中存储的直接就是<code>对象的地址</code>。</p><p>这两种对象访问方式各有优势。使用句柄来访问的最大好处是 reference 中存储的是<code>稳定的句柄地址</code>，在对象被移动时只会改变<code>句柄中的实例数据指针</code>，而 reference 本身不需要修改。使用直接指针访问方式最大的好处就是<code>速度快</code>，它节省了一次指针定位的时间开销。</p><h2 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h2><p>逃逸分析的基本行为就是<code>分析对象动态作用域</code>：当一个<code>对象</code>在方法中被定义后，它可能<code>被外部方法引用</code>，例如作为调用参数传递到其他方法中，称为<code>方法逃逸</code>。甚至还有可能被<code>外部线程访问</code>到，譬如赋值给类变量或可以在其他线程中访问的实例变量，称为<code>线程逃逸</code>。如果能证明一个对象不会逃逸到方法或线程之外，也就是别的方法或线程无法通过任何途径访问到这个对象，则可能为这个变量进行一些高效的优化：</p><h3 id="1-栈上分配"><a href="#1-栈上分配" class="headerlink" title="1.栈上分配"></a>1.栈上分配</h3><p>Java虚拟机中，如果<code>确定</code>一个对象<code>不会逃逸出方法</code>之外，那让这个对象在<code>栈上分配内</code>存将会是一个很不错的主意，<code>对象所占用的内存空间就可以随栈帧出栈而销毁</code>。在一般应用中，不会逃逸的局部对象所占的比例很大，如果能使用栈上分配，那大量的对象就会随着方法的结束而自动销毁了，<code>垃圾收集系统的压力将会小很多</code>。</p><h3 id="2-同步消除"><a href="#2-同步消除" class="headerlink" title="2.同步消除"></a>2.同步消除</h3><p>线程同步本身是一个相对耗时的过程，如果逃逸分析能够确定一个<code>变量不会逃逸出线程</code>，无法被其他线程访问，那这个变量的<code>读写肯定就不会有竞争</code>，对这个变量实施的<code>同步措施也就可以消除</code>。</p><h3 id="3-标量替换"><a href="#3-标量替换" class="headerlink" title="3.标量替换"></a>3.标量替换</h3><p>标量是指一个<code>数据已经无法再分解成更小的数据</code>来表示了，Java虚拟机的原始数据类型都不能再进一步分解，它们就可以称为标量。如果逃逸分析证明一个对象<code>不会被外部访问</code>，并且这个对象<code>可以被拆散</code>的话，那程序真正执行的时候将可能<code>不创建这个对象</code>，而改为<code>直接创建它的若干个被这个方法使用的成员变量</code>来代替。除了可以让对象的成员变量在栈上（栈上存储的数据，有很大的概率会被虚拟机分配到物理机器高速寄存器中存储）分配和读写之外，还可以为后续进一步的优化手段创建条件。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于引用</title>
      <link href="/2023/05/04/%E5%85%B3%E4%BA%8E%E5%BC%95%E7%94%A8%E4%B8%8E%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/"/>
      <url>/2023/05/04/%E5%85%B3%E4%BA%8E%E5%BC%95%E7%94%A8%E4%B8%8E%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>JAVA在1.2之后有着四种引用类型：<code>强引用</code>（Strong Reference）、<code>软引用</code>（Soft Reference）、<code>弱引用</code>（Weak Reference）、<code>虚引用</code>（Phantom Reference）, 4 种引用的强度依次减弱。</p><h4 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h4><p>Java中默认声明的就是强引用，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>(); <span class="comment">//只要obj还指向Object对象，Object对象就不会被回收</span></span><br><span class="line">obj = <span class="literal">null</span>;  <span class="comment">//手动置null</span></span><br></pre></td></tr></table></figure><p>只要强引用存在，垃圾回收器将永远不会回收被引用的对象，哪怕内存不足时，JVM也会直接抛出OutOfMemoryError，不会去回收。如果想中断强引用与对象之间的联系，可以显示的将强引用赋值为null，这样一来，JVM就可以适时的回收对象了。</p><h4 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h4><p>java.lang.ref.SoftReference</p><p>软引用是用来描述一些非必需但仍有用的对象。在<code>内存足够的时候，软引用对象不会被回收，只有在内存不足时，系统则会回收软引用对象</code>，如果回收了软引用对象之后仍然没有足够的内存，才会抛出内存溢出异常。这种特性常常被用来实现缓存技术，比如网页缓存，图片缓存等。</p><p>如果一个对象唯一剩下的引用是软引用，那么该对象是<code>软可及</code>的（softly reachable）。垃圾收集器并不像其收集弱可及的对象一样尽量地收集软可及的对象，相反，它只在真正 “需要” 内存时才收集软可及的对象。</p><h4 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h4><p>java.lang.ref.WeakReference</p><p>弱引用的引用强度比软引用要更弱一些，无论内存是否足够，只要 JVM <code>开始进行垃圾回收，那些被弱引用关联的对象都会被回收</code>。</p><h4 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h4><p>PhantomReference</p><p>通过查看这个类的源码，发现它只有一个构造函数和一个 get() 方法，而且它的 get() 方法仅仅是返回一个null，也就是说将永远无法通过虚引用来获取对象，虚引用必须要和 ReferenceQueue 引用队列一起使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhantomReference</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">Reference</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns this reference object&#x27;s referent.  Because the referent of a</span></span><br><span class="line"><span class="comment">     * phantom reference is always inaccessible, this method always returns</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;null&lt;/code&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  &lt;code&gt;null&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PhantomReference</span><span class="params">(T referent, ReferenceQueue&lt;? <span class="built_in">super</span> T&gt; q)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(referent, q);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="引用队列"><a href="#引用队列" class="headerlink" title="引用队列"></a>引用队列</h4><p>引用队列可以与软引用、弱引用以及虚引用一起配合使用，当垃圾回收器准备回收一个对象时，如果发现它还有引用，那么就会在回收对象之前，把这个引用加入到与之<code>关联的引用队列</code>中去。程序可以通过判断引用队列中是否已经加入了引用，来判断被引用的对象是否将要被垃圾回收，这样就可以在对象被回收之前采取一些必要的措施。</p><p>ReferenceQueue是使用wati()和notifyAll()实现生产者和消费者模式的一个具体场景。</p><h3 id="Reference类"><a href="#Reference类" class="headerlink" title="Reference类"></a>Reference类</h3><p>引用实例的几个状态：</p><ul><li>Active：当处于Active状态，gc会特殊处理引用实例，一旦gc检测到其可达性发生变化，gc就会更改其状态。此时分两种情况，如果该引用实例创建时有注册引用队列，则会进入pending状态，否则会进入inactive状态。新创建的引用实例为Active。</li><li>Pending：当前为pending-Reference列表中的一个元素，等待被ReferenceHandler线程消费并加入其注册的引用队列。如果该引用实例未注册引用队列，则永远不会处理这个状态。</li><li>Enqueued：该引用实例创建时有注册引用队列并且当前处于入队列状态，属于该引用队列中的一个元素。当该引用实例从其注册引用队列中移除后其状态变为Inactive。如果该引用实例未注册引用队列，则永远不会处理这个状态。</li><li>Inactive：当处于Inactive状态，无需任何处理，一旦变成Inactive状态则其状态永远不会再发生改变。</li></ul><p><img src="https://img2020.cnblogs.com/blog/2443180/202108/2443180-20210815122647528-1748134729.png" alt="img"></p><h3 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h3><h4 id="什么是内存泄漏"><a href="#什么是内存泄漏" class="headerlink" title="什么是内存泄漏"></a>什么是内存泄漏</h4><p>对象已经没有被应用程序使用，但是垃圾回收器没办法移除它们，因为还在被引用着。</p><p>所以内存泄漏需要满足两个点：</p><p>​对象可达，对象无用。(JAVA从语言上保证所有对象都是可达的，所有不可达对象都由GC管理)</p><p>​比如对于一个对象内的对象进行回收，对于整个对象不进行回收（置null），那么这个对象里面是空的，可是GC不会去回收这个对象。</p><p><img src="https://img-blog.csdnimg.cn/ac9c2b68edcd459783ad8f6c77a152a7.png" alt="内存泄漏存在的原因"></p><p>这里的有引用对象和无用对象的交集就是内存泄漏。</p><p>####JAVA中的内存泄漏</p><p>Java会使用有向图的方法进行管理内存，实时监控对象是否可以达到，如果不可到达，则就将其回收。</p><p>在Java语言中，判断一个内存空间是否符合垃圾收集的标准有两个：一个是给对象赋予了空值null，并且以下再没有调用过；另一个是给对象赋予了新值，这样重新分配了内存空间。</p><p>Java内存泄漏的<code>根本原因</code>是什么呢？长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄漏，尽管<code>短生命周期对象已经不再需要</code>，但是因为<code>长生命周期持有它的引用</code>而导致不能被回收，这就是Java中内存泄漏的发生场景。严重时会报Out of memory。</p><p>检查内存泄露的工具： Optimizeit Profiler、JProbe Profiler、JinSight、Rational 公司的 Purify 等。</p><h3 id="JAVA内存分配"><a href="#JAVA内存分配" class="headerlink" title="JAVA内存分配"></a>JAVA内存分配</h3><p>Java 程序运行时的内存分配策略有三种,分别是静态分配,栈式分配,和堆式分配，对应的，三种存储策略使用的内存空间主要分别是静态存储区（也称方法区）、栈区和堆区。</p><p><code>静态存储区</code>（方法区）：主要存放静态数据、全局 static 数据和常量。这块内存在程序编译时就已经分配好，并且在程序整个运行期间都存在。</p><p><code>栈区</code> ：当方法被执行时，方法体内的<code>局部变量</code>（其中包括基础数据类型、对象的引用）都在栈上创建，并在方法执行结束时这些局部变量所持有的内存将会自动被释放。因为栈内存分配运算内置于处理器的指令集中，<code>效率很高</code>，但是分配的<code>内存容量有限</code>。</p><p><code>堆区</code> ：又称动态内存分配，通常就是指在程序运行时直接 new 出来的内存，也就是<code>对象的实例</code>。这部分内存在不使用时将会由 Java <code>垃圾回收器来负责回收</code>。</p><h4 id="堆与栈的区别"><a href="#堆与栈的区别" class="headerlink" title="堆与栈的区别"></a>堆与栈的区别</h4><p>方法体内定义的（<strong>局部变量</strong>）一些基本类型的变量和对象的引用变量都是在方法的栈内存中分配的。当在一段方法块中定义一个变量时，Java 就会在栈中为该变量分配内存空间，当超过该变量的作用域后，该变量也就无效了，分配给它的内存空间也将被释放掉，该<code>内存空间可以被重新使用</code>。</p><p>堆内存用来存放所有由 new 创建的对象（包括该对象其中的所有成员变量）和数组。在堆中分配的内存，将由 Java 垃圾回收器来自动管理。<code>在堆中产生了一个数组或者对象后，还可以在栈中定义一个特殊的变量，这个变量的取值等于数组或者对象在堆内存中的首地址，这个特殊的变量就是我们上面说的引用变量</code>。我们可以通过这个引用变量来访问堆中的对象或者数组。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>jvm中引用有好几种类型的实现，gc针对这几种不同类型的引用有着不同的<code>回收机制</code>，同时它们也有着各自的应用场景, 比如SoftReference可以用来做高速缓存, WeakReference也可以用来做一些普通缓存(WeakHashMap), 而PhantomReference则用在一些特殊场景，比如Cleaner就是一个很好的应用场景，它可以用来回收堆外内存。与此同时，SoftReference, WeakReference, PhantomReference这几种弱类型引用还可以与引用队列结合使用，使得可以在关联引用回收之后可以做一些额外处理，甚至于Finalizer(收尾机制)都可以在对象回收过程中改变对象的生命周期。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>同步的一些内容</title>
      <link href="/2023/05/04/%E5%90%8C%E6%AD%A5%E3%80%81%E9%94%81%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
      <url>/2023/05/04/%E5%90%8C%E6%AD%A5%E3%80%81%E9%94%81%E4%B8%8E%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>###AbstractQueuedSynchronizer</p><p>AQS是一个基于先进先出等待队列来实现阻塞锁和相关同步器的框架。</p><p>AQS作为基础类，主要解决了在<u>锁不能获取的情况下的等待，以及锁释放后的唤起</u>。锁状态的定义，如何获取锁以及如何释放锁，都是需要相应的同步机制自己实现的。</p><p>什么情况下会用到：在日常的编程中我们经常会碰到并发的情况。有并发，就有资源共享；有资源共享就需要处理资源同步访问。处理同步的时候，就要处理<u><strong>竞争发生时候的等待问题</strong></u>以及<u><strong>竞争解除后的唤起的问题</strong></u>。AQS就是一个便于我们实现这种同步机制的框架。我们日常中使用到的ReentrantLock、ReentrantReadWriteLock以及ArrayBlockingQueue等都是基于AQS实现的。</p><p>主要实现方法：</p><ul><li>tryAcquire()，获取排他锁</li><li>tryRelease()，释放排他锁</li><li>tryAcquireShared()，获取共享锁</li><li>tryReleaseShared()，释放共享锁</li><li>isHeldExclusively()，是不是持有排他锁</li></ul><p>使用state来标识锁的状态，state &#x3D; 0表示锁没有被获取，当state &gt; 0表示锁已经被获取了。</p><p>AQS流程：<code>AQS</code>为加锁和解锁过程提供了统一的模板函数，加锁与解锁的模板流程是，获取锁失败的线程，会进入<code>CLH</code>队列阻塞，其他线程解锁会唤醒<code>CLH</code>队列线程，如下图所示（简化流程）</p><p><img src="https://pics7.baidu.com/feed/42a98226cffc1e17c1dd2eb13ee85d0b728de955.png@f_auto?token=119485b520bd32fb495070b2b10de00a" alt="img"></p><p>上图中，线程释放锁时，会唤醒<code>CLH</code>队列阻塞的线程，重新竞争锁，要注意，此时可能还有非<code>CLH</code>队列的线程参与竞争，所以非公平就体现在这里，非<code>CLH</code>队列线程与<code>CLH</code>队列线程竞争，各凭本事，不会因为你是<code>CLH</code>队列的线程，排了很久的队，就把锁让给你。</p><p>###ReentrantLock</p><p><a href="https://baijiahao.baidu.com/s?id=1702822534980452383&wfr=spider&for=pc">通俗易懂的ReentrantLock (baidu.com)</a></p><p><code>ReentrantLock</code>是可重入的互斥锁，虽然具有与<code>synchronized</code>相同功能，但是会比<code>synchronized</code>更加灵活（<strong>具有更多的方法</strong>）。</p><p><code>ReentrantLock</code>底层基于<code>AbstractQueuedSynchronizer</code>实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReentrantLock</span> <span class="keyword">implements</span> <span class="title class_">Lock</span>;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Sync</span> <span class="keyword">extends</span> <span class="title class_">AbstractQueuedSynchronizer</span>;</span><br><span class="line"><span class="comment">//Sync继承AbstractQueuedSynchronizer提供释放资源的实现</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">NonfairSync</span> <span class="keyword">extends</span> <span class="title class_">Sync</span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">        setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        acquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">(<span class="type">int</span> acquires)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nonfairTryAcquire(acquires);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">FairSync</span> <span class="keyword">extends</span> <span class="title class_">Sync</span>;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>在<code>ReentrantLock</code>中，它对<code>AbstractQueuedSynchronizer</code>的<code>state</code>状态值定义为线程获取该锁的重入次数，<code>state</code>状态值为<code>0</code>表示当前没有被任何线程持有，<code>state</code>状态值为<code>1</code>表示被其他线程持有，因为支持可重入，如果是持有锁的线程，再次获取同一把锁，直接成功，并且<code>state</code>状态值<code>+1</code>，线程释放锁<code>state</code>状态值<code>-1</code>，同理重入多次锁的线程，需要释放相应的次数。</p><p>非公平锁：</p><p><img src="https://pics6.baidu.com/feed/a686c9177f3e6709581b64d256bf3435f8dc5500.png@f_auto?token=1d12d8cf05396c6754a46ea388cb64d8" alt="img"></p><p>公平锁：</p><p><img src="https://pics2.baidu.com/feed/2fdda3cc7cd98d10f8dd53e64d4713067aec9059.png@f_auto?token=5888e9e64916dbe648c26b01794cd812" alt="img"></p><p>使用<code>独占方式</code>获取的资源是与具体线程绑定的，就是说如果一个线程获取到了资源，就会标记是这个线程获取到了，其他线程再尝试操作state获取资源时会发现当前该资源不是自己持有的，就会在获取失败后被阻塞。</p><p>对应的<code>共享方式</code>的资源与具体线程是不相关的，当多个线程去请求资源时通过CAS方式竞争获取资源，当一个线程获取到了资源后，另外一个线程再次去获取时如果当前资源还能满足它的资源，则当前线程只需要使用CAS方式进行获取即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tryAcquire 具体的子类去实现，并维护state的状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">acquire</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg)) <span class="comment">// 如果失败标记状态，入队</span></span><br><span class="line">        selfInterrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tryRelease 具体的子类是实现，并设置state的状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">release</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (tryRelease(arg)) &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">h</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">if</span> (h != <span class="literal">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</span><br><span class="line">            unparkSuccessor(h); <span class="comment">// 调用unpark唤醒队列的线程，并调用tryAcquire尝试，看是否需要，如果不需要，继续挂起</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关于ReentrantLock可重入性的实现"><a href="#关于ReentrantLock可重入性的实现" class="headerlink" title="关于ReentrantLock可重入性的实现"></a>关于ReentrantLock可重入性的实现</h4><p>ReentrantLock具备可重入的能力，即同一个线程多次获取锁，不引起阻塞。</p><h3 id="分段锁"><a href="#分段锁" class="headerlink" title="分段锁"></a>分段锁</h3><p>分段锁其实是一种锁的设计，并不是具体的一种锁。</p><p><strong>设计目的是细化锁的粒度，当操作不需要更新整个数组的时候，就仅仅针对数组中的一项进行加锁操作。</strong></p><p>###乐观锁与悲观锁</p><p>####互斥锁</p><p>多个线程访问一个对象的时候，会想到使用互斥锁进行协调，互斥锁是一个<strong>悲观</strong>锁，也就是操作系统会认为，<strong>如果不严格的同步线程调用，那么一定会产生异常</strong>，所以这里进行锁定，是的对象只供一个线程调用。</p><p>缺陷：1.可能大部分请求都是读操作，不需要上锁。</p><p>​2.可能同步代码块执行的耗时远远小于线程切换的耗时。</p><p>####CAS</p><p>需要实现原子性，各个架构都提供了CAS原子性的实现方法，可以直接让CPU实现，不用锁来实现线程同步。</p><p>所谓CSA 就是线程调用的时候先判断old值是不是符合期望，如果符合就修改，这时另外的线程来访问就需要进行自旋(次数可配置，默认10,<strong>自旋不需要加载上下文</strong>)，等到这个线程结束。这里就是所谓的<strong>乐观锁</strong>，其实乐观锁不是一种锁，是靠原子性实现的一种<strong>无锁同步机制</strong>，只是名字相对于悲观锁被沿用了。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0894ed62c588d7ad6dbd4640d407e356.png" alt="img"></p><p>####偏向锁</p><p><strong>偏向锁是指一段同步代码一直被一个线程所访问，那么该线程会自动获取锁。降低获取锁的代价</strong>（偏向于这个线程）</p><p>适用场景：始终只有一个线程在执行代码块，在它没有执行完释放锁之前，没有其它线程去执行同步快，在锁无竞争的情况下使用，一旦有了竞争就升级为轻量级锁，升级为轻量级锁的时候需要撤销偏向锁, 导致stop the word操作，有锁竞争时会降低效率，应当禁用。</p><p>####轻量级锁</p><p><strong>轻量级锁是指当锁是偏向锁的时候，被另一个线程锁访问，偏向锁就会升级为轻量级锁，其他线程会通过自选的形式尝试获取锁，不会阻塞，提高性能。</strong></p><p>####重量级锁</p><p><strong>重量级锁是指当锁为轻量级锁的时候，另一个线程虽然是自旋，但自旋不会一直持续下去，当自旋一定次数的时候，还没有获取到锁，就会进入阻塞，该锁膨胀为重量级锁。重量级锁会让其他申请的线程进入阻塞，性能降低。</strong></p><p>###公平锁与非公平锁</p><p>公平锁：多个线程按照申请锁的顺序去获得锁，线程会直接进入队列去排队，永远都是队列的第一位才能得到锁。</p><p>优点：所有的线程都能得到资源，不会饿死在队列中。<br>缺点：吞吐量会下降很多，队列里面除了第一个线程，其他的线程都会阻塞，cpu唤醒阻塞线程的开销会很大。</p><p>非公平锁：多个线程去获取锁的时候，会直接去尝试获取，获取不到，再去进入等待队列，如果能获取到，就直接获取到锁。</p><p>优点：可以减少CPU唤醒线程的开销，整体的吞吐效率会高点，CPU也不必取唤醒所有线程，会减少唤起线程的数量。<br>缺点：你们可能也发现了，这样可能导致队列中间的线程一直获取不到锁或者长时间获取不到锁，导致饿死。</p><h3 id="共享锁与排他锁"><a href="#共享锁与排他锁" class="headerlink" title="共享锁与排他锁"></a>共享锁与排他锁</h3><ul><li><strong>共享锁：</strong>对某一资源加共享锁，自身可以读该资源，其他人也可以读该资源（也可以再继续加共享锁，即 共享锁可多个共存），但无法修改。要想修改就必须等所有共享锁都释放完之后。</li><li><strong>排他锁：</strong>对某一资源加排他锁，自身可以进行增删改查，其他人无法进行任何操作。</li></ul><h3 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h3><p><strong>在Java中，自旋锁是指尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试获取锁，这样的好处是减少线程上下文切换的消耗，缺点是循环会消耗CPU。</strong></p><p><strong>如果锁的竞争激烈，或者持有锁的线程需要长时间占用锁执行同步块，这时候就不适用使用自旋锁了，因为自旋锁在获取锁前一直都是占用cpu做无用功，同时有大量线程在竞争一个锁，会导致获取锁的时间很长，线程自旋的消耗大于线程阻塞挂起操作的消耗，其它需要cpu的线程又不能获取到cpu，造成cpu的浪费。</strong></p><h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><p>简单点说就是确保读的时候读到的是最新值，保证线程可见性。</p><p>两个特性：<code>内存可见性</code>、<code>禁止重排序</code></p><p>禁止重排序：<strong>不管是编译器还是JVM还是CPU，都会对一些指令进行重排序，目的是为了提高程序运行的速度，提高程序的性能，毫无疑问，在单线程下没毛病，多线程就似乎生病了。</strong></p><p>volatile 可以保证线程可见性且提供了一定的有序性，但是无法保证原子性。在 JVM 底层是基于<code>内存屏障</code>实现的。</p><ul><li>当对非 volatile 变量进行读写的时候，每个线程先从内存拷贝变量到 CPU 缓存中。如果计算机有多个CPU，每个线程可能在不同的 CPU 上被处理，这意味着每个线程可以拷贝到不同的 CPU cache 中。</li><li>而声明变量是 volatile 的，JVM 保证了每次读变量都从内存中读，跳过 CPU cache 这一步，所以就不会有可见性问题。<ul><li>对 volatile 变量进行写操作时，会在写操作后加一条 store 屏障指令，将工作内存中的共享变量刷新回主内存；</li><li>对 volatile 变量进行读操作时，会在写操作后加一条 load 屏障指令，从主内存中读取共享变量；</li></ul></li></ul><p>很难做出准确、全面的评价，例如 “X 总是比 Y 快”，尤其是对 JVM 内在的操作而言。（例如，某些情况下 JVM 也许能够完全删除锁机制，这使得我们难以抽象地比较 <code>volatile</code> 和 <code>synchronized</code> 的开销。）就是说，在目前大多数的处理器架构上，volatile 读操作开销非常低 —— 几乎和非 volatile 读操作一样。而 volatile 写操作的开销要比非 volatile 写操作多很多，因为要保证可见性需要实现内存界定（Memory Fence），即便如此，volatile 的总开销仍然要比锁获取低。</p><p>关于禁止重排序的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 来一波双重校验</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="type">Test</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Test</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Test <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;<span class="comment">// 多了一层判断，不让每次进来都阻塞，提高了性能</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Test.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// instance类变量前面修饰的volatile？是吧？</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">memory =allocate();    <span class="comment">//1. 分配对象的内存空间 </span></span><br><span class="line">ctorInstance(memory);  <span class="comment">//2. 初始化对象 </span></span><br><span class="line">instance = memory;     <span class="comment">//3. 设置instance指向刚分配的内存地址</span></span><br></pre></td></tr></table></figure><p>上面三个指令中，步骤2依赖步骤1，但是步骤3不依赖步骤2，所以JVM可能针对他们进行指令重拍序优化，重排后的指令如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">memory =allocate();    <span class="comment">//1. 分配对象的内存空间 </span></span><br><span class="line">instance = memory;     <span class="comment">//3. 设置instance指向刚分配的内存地址</span></span><br><span class="line">ctorInstance(memory);  <span class="comment">//2. 初始化对象 </span></span><br></pre></td></tr></table></figure><p>这样优化之后，内存的初始化被放到了instance分配内存地址的后面，这样的话当线程1执行步骤3这段赋值指令后，刚好有另外一个线程2进入getInstance方法判断instance不为null，这个时候线程2拿到的instance对应的内存其实还未初始化，这个时候拿去使用就会导致出错。</p><h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3><p>假如想实现<u><strong>每一个线程都有自己的专属本地变量</strong></u>该如何解决呢？ JDK中提供的<code>ThreadLocal</code>类正是为了解决这样的问题。</p><p>ThreadLocal叫做<em><strong>线程变量</strong></em>，意思是ThreadLocal中填充的变量属于当前线程，该变量对其他线程而言是<strong>隔离</strong>的，也就是说该变量是当前线程独有的变量，<code>不存在多线程间共享的问题</code>。ThreadLocal为变量在每个线程中都创建了一个副本，那么每个线程可以访问自己内部的副本变量。当一个线程结束时，它所使用的所有 ThreadLocal 相对的实例副本都可被回收。</p><p>总的来说，ThreadLocal 适用于每个线程需要自己独立的实例且该实例需要在多个方法中被使用，也即<code>变量在线程间隔离而在方法或类间共享的场景</code>。</p><p>一句话理解ThreadLocal，threadlocl是作为当前线程中属性ThreadLocalMap集合中的某一个Entry的key值Entry<code>（threadlocl,value）</code>，虽然不同的线程之间threadlocal这个key值是一样，但是不同的线程所拥有的ThreadLocalMap是独一无二的，也就是不同的线程间同一个ThreadLocal（key）对应存储的值(value)不一样，从而到达了线程间变量隔离的目的，但是在<strong>同一个线程中这个value变量地址是一样</strong>的。</p><p>使用时可以使用<code>get（）</code>和<code>set（）</code>方法来获取默认值或将其值更改为当前线程所存的副本的值，从而避免了线程安全问题。</p><p>####关于ThreadLocal的内存泄漏</p><p>ThreadLocalMap 中使用的 key 为 ThreadLocal 的<code>弱</code>引用,而 value 是<code>强</code>引用。如果 ThreadLocal 没有被外部强引用的情况下，在垃圾回收的时候会 key 会被清理掉，而 value 不会被清理掉。这样一来，ThreadLocalMap 中就会出现key为null的Entry。假如我们不做任何措施的话，value 永远无法被GC 回收，这个时候就可能会产生内存泄露。</p><p>ThreadLocalMap实现中已经考虑了这种情况，在调用 <code>set()</code>、<code>get()</code>、<code>remove()</code> 方法的时候，会清理掉 key 为 null 的记录。使用完 ThreadLocal方法后 最好手动调用<code>remove()</code>方法。</p><p>###Synchonized</p><p>synchronized的用处是保证在同一时刻， 被修饰的代码块或方法只会有一个线程执行，以达到保证并发安全的效果。</p><p>synchronized的作用主要有三个：</p><ol><li>原子性：确保线程<code>互斥地访问</code>同步代码；</li><li>可见性：保证共享变量的修改能够及时可见，其实是通过Java内存模型中的“对一个变量unlock操作之前，必须要同步到主内存中；如果对一个变量进行lock操作，则将会清空工作内存中此变量的值，在执行引擎使用此变量前，需要<code>重新从主内存</code>中load操作或assign操作初始化变量值” 来保证的；</li><li>有序性：有效解决重排序问题，即 “一个unlock操作先行发生(happen-before)于后面对同一个锁的lock操作”；</li></ol><p>synchronized的3种使用方式：</p><ul><li>修饰实例方法：作用于当前实例加锁</li><li>修饰静态方法：作用于当前类对象加锁</li><li>修饰代码块：指定加锁对象，对给定对象加锁</li></ul><p>synchronized关键字不能继承，当然子类调用父类同步方法也是同步的。</p><p>synchronized在JVM里的实现都是基于进入和退出<code>Monitor对象</code>来实现方法同步和代码块同步，虽然具体实现细节不一样，但是都可以通过成对的MonitorEnter和MonitorExit指令来实现。</p><p><code>MonitorEnter</code>指令：插入在同步代码块的开始位置，当代码执行到该指令时，将会尝试获取该对象Monitor的所有权，即尝试获得该对象的锁；</p><p><code>MonitorExit</code>指令：插入在方法结束处和异常处，JVM保证每个MonitorEnter必须有对应的MonitorExit；</p><p>什么是Monitor？可以把它理解为 一个同步工具，也可以描述为一种同步机制，它通常被描述为一个对象。与一切皆对象一样，所有的Java对象是天生的Monitor，每一个Java对象都有成为Monitor的潜质，因为在Java的设计中，每一个Java对象自打娘胎里出来就带了一把看不见的锁，它叫做内部锁或者Monitor锁。</p><p>###ThreadLocal与Synchronized的区别</p><p>ThreadLocal和Synchonized都用于解决多线程并发访问。</p><p>但是ThreadLocal与synchronized有本质的区别：</p><p>1、Synchronized用于线程间的数据<code>共享</code>，而ThreadLocal则用于线程间的数据<code>隔离</code>。</p><p>2、Synchronized是利用锁的机制，使变量或代码块在某一时该只能被一个线程访问。而ThreadLocal为每一个线程都提供了变量的<code>副本</code>，使得每个线程在某一时间访问到的并不是同一个对象，这样就隔离了多个线程对数据的数据共享,而Synchronized却正好相反，它用于在多个线程间通信时能够获得数据<code>共享</code>。</p><p>###ReentrantReadWriteLock</p><p>ReentrantReadWriteLock称为读写锁，它提供一个<code>读锁</code>，支持<code>多个线程共享同一把锁</code>。它也提供了一把<code>写锁</code>，是<code>独占锁</code>，和其他读锁或者写锁互斥，表明只有一个线程能持有锁资源。通过两把锁的协同工作，能够最大化的提高读写的性能，特别是读多写少的场景，而往往大部分的场景都是读多写少的。</p><h4 id="可重入性的实现"><a href="#可重入性的实现" class="headerlink" title="可重入性的实现"></a>可重入性的实现</h4><p>这个问题需要引入两个概念，<code>锁升级</code>，<code>锁降级</code>。</p><ul><li>锁升级：从读锁变成写锁。</li><li>锁降级：从写锁变成读锁。</li></ul><p>重入时锁升级不支持：持有读锁的情况下去获取写锁会导致获取写锁永久等待，需要先释放读，再去获得写</p><p>重入时锁降级支持：持有写锁的情况下去获取读锁，造成只有当前线程会持有读锁，因为写锁会互斥其他的锁</p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>缓存：缓存更新时，是先清缓存还是先更新数据库？</p><p>先清缓存：可能造成<code>刚清理缓存还没有更新数据库</code>，高并发下，<code>其他线程</code>直接<code>查询了数据库过期数据到缓存中</code>，这种情况非常严重，直接导致<code>后续所有的请求缓存和数据库不一致</code>。<br>先更新据库：可能造成<code>刚更新数据库，还没清空缓存就有线程从缓存拿到了旧数据</code>，这种情况概率比较小，影响范围有限，只对这一次的查询结果有问题。</p><p>显而易见，通常情况下，<code>先更新数据库，然后清空缓存</code>。</p><p>###线程</p><h4 id="join方法"><a href="#join方法" class="headerlink" title="join方法"></a>join方法</h4><p>结论：t.join()方法会使所有线程都暂停并等待t的执行完毕后再执行</p><p>实现: join之所以可以实现线程等待是因为调用wait方法。而wait方法会让<strong>当前线程</strong>陷入等待。注意，是<strong>当前线程</strong>！在执行tA.join()这句代码的时候，当前线程是main主线程。在tA.join()当中的wait(0)方法是让<code>main线程陷入了无尽的等待</code>中。正是因为如此，在tA.join()之前的代码都会正常从上往下执行，而在tA.join()之后的代码都随着main线程陷入等待而无法继续执行。这样便达到了网上说的 “t.join()方法会使所有线程都暂停并等待t的执行完毕后再执行”。同时<code>线程在die的时候会自动调用自身的notifyAll方法，来释放所有因为该锁陷入等待的资源和锁</code>。</p><h4 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h4><p>场景</p><p>在主线程中开启多个线程去<code>并行</code>任务，并且<code>主线程</code>需要<code>等待所有子线程执行完毕</code>后再进行汇总的场景.</p><p>原理</p><p>首先状态变量state：state用来表示计数器当前的值，当线程调用CountDownLatch对象的await方法后，当前线程会被阻塞，直到下面的情况之一发生才返回：</p><p>当所有线程都调用了CountDownLatch对象的countDown(减去计数器的值)方法后，也就是计数器的值为0时：其他线程调用了当前线程的interrupt()方法中断了当前线程，当前线程就会抛出InterruptedException异常。</p><h3 id="锁总结"><a href="#锁总结" class="headerlink" title="锁总结"></a>锁总结</h3><p><strong>Java锁机制可归为Sychornized锁和Lock锁两类。Synchronized是基于JVM来保证数据同步的，而Lock则是硬件层面，依赖特殊的CPU指令来实现数据同步的。</strong></p><ul><li>Synchronized是一个非公平、悲观、独享、互斥、可重入的重量级锁。</li><li>ReentrantLock是一个默认非公平但可实现公平的、悲观、独享、互斥、可重入、重量级锁。</li><li>ReentrantReadWriteLock是一个默认非公平但可实现公平的、悲观、写独享、读共享、读写、可重入、重量级锁。</li></ul><h3 id="线程池（高频）"><a href="#线程池（高频）" class="headerlink" title="线程池（高频）"></a>线程池（高频）</h3><p>为什么使用线程池？</p><ul><li><strong>降低资源消耗</strong>。通过<code>重复利用</code>已创建的线程降低线程创建和销毁造成的消耗。</li><li><strong>提高响应速度</strong>。当任务到达时，任务可以<code>不需要等到线程创建</code>就能立即执行。</li><li><strong>提高线程的可管理性</strong>。线程是<code>稀缺资源</code>，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</li></ul><p>有哪些线程池？</p><p><strong>newFixedThreadPool</strong>（固定线程池）、<strong>newSingleThreadExecutor</strong>（单个线程的线程池）、<strong>newCachedThreadPool</strong>（缓存线程的线程池）、<strong>newScheduledThreadPool</strong>（带定时器的线程池）</p><p>####线程池参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,</span></span><br><span class="line"><span class="params">                          <span class="type">int</span> maximumPoolSize,</span></span><br><span class="line"><span class="params">                          <span class="type">long</span> keepAliveTime,</span></span><br><span class="line"><span class="params">                          TimeUnit unit,</span></span><br><span class="line"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class="line"><span class="params">                          ThreadFactory threadFactory,</span></span><br><span class="line"><span class="params">                          RejectedExecutionHandler handler)</span></span><br></pre></td></tr></table></figure><ul><li>corePoolSize：核心线程数线程数定义了<code>最小可以同时运行</code>的线程数量</li><li>maximumPoolSize：当队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为<code>最大线程数</code></li><li>keepAliveTime：当线程数大于<code>核心线程数</code>时，多余的<code>空闲线程存活的最长时间</code></li><li>TimeUnit：时间单位</li><li>BlockingQueue：当新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中</li><li>ThreadFactory：线程工厂，用来创建线程，一般默认即可</li><li>RejectedExecutionHandler：拒绝策略</li></ul><p><img src="https://camo.githubusercontent.com/8224f690269cfcd9af6899b48f681e098b42c4adfda3a5c6527990f97ee4631f/68747470733a2f2f67697465652e636f6d2f647265616d63617465722f626c6f672d696d672f7261772f6d61737465722f755069632f2545372542412542462545372541382538422545362542312541302545352538462538322545362539352542302545352538352542332545372542332542422d4a676a6c57552e706e67" alt="线程池参数关系"></p><h4 id="拒绝策略"><a href="#拒绝策略" class="headerlink" title="拒绝策略"></a>拒绝策略</h4><ul><li>AbortPolicy：抛出 <code>RejectedExecutionException</code>来拒绝新任务的处理。</li><li>CallerRunsPolicy：调用执行自己的线程运行任务(主线程同时处理自己的任务和该任务)。但是这种策略会<code>降低</code>对于新任务<code>提交速度</code>，<code>影响</code>程序的<code>整体性能</code>。另外，这个策略喜欢增加队列容量。如果您的应用程序可以承受此延迟并且你任务<code>不能丢弃任何一个任务请求</code>的话，你可以选择这个策略。（说白了，谁管理任务的，谁就负责帮忙）</li><li>DiscardPolicy：不处理新任务，直接丢弃掉。</li><li>DiscardOldestPolicy：此策略将丢弃最早的未处理的任务请求。</li></ul><h4 id="线程池线程数量"><a href="#线程池线程数量" class="headerlink" title="线程池线程数量"></a>线程池线程数量</h4><p>如何确定？</p><ol><li>一般来说，如果是CPU密集型应用，则线程池大小设置为N+1。（N是CPU的核心数）</li><li>一般来说，如果是IO密集型应用，则线程池大小设置为2N+1。</li><li>在IO优化中，线程等待时间（IO时间）所占比例越高，需要越多线程，线程CPU时间所占比例越高，需要越少线程。这样的估算公式可能更适合：最佳线程数目 &#x3D; （（线程等待时间+线程CPU时间）&#x2F;线程CPU时间 ）* CPU数目</li></ol><h4 id="shutdown和shutdownNow"><a href="#shutdown和shutdownNow" class="headerlink" title="shutdown和shutdownNow"></a>shutdown和shutdownNow</h4><p>shutdown是等待所有线程执行任务完毕之后退出。</p><p>shutdownNow是立马中断所有的线程，关闭线程池。</p><h4 id="submit和execute"><a href="#submit和execute" class="headerlink" title="submit和execute"></a>submit和execute</h4><p>区别：</p><ol><li>execute只能提交Runnable类型的任务，没有返回值，而submit既能提交Runnable类型任务也能提交Callable类型任务，返回Future类型。</li><li>execute方法提交的任务异常是直接抛出的，而submit方法是是捕获了异常的，当调用FutureTask的get方法时，才会抛出异常。</li></ol><img src="https://img-blog.csdnimg.cn/img_convert/801f9038979ba89405141affda430217.png" alt="img" style="zoom:50%;" /><p>execute是Executor接口的方法，而submit是ExecutorService的方法，并且ExecutorService接口继承了Executor接口。</p><h3 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h3><p>BlockingQueue</p><p>BlockingQueue 继承了 Queue 接口，是队列的一种。</p><p>阻塞队列（BlockingQueue）是一个在队列基础上又支持了两个附加操作的队列，两个附加操作（实现阻塞功能）:</p><p>支持阻塞的<code>插入方法put</code>: 队列满时，队列会<code>阻塞插入元素的线程</code>，直到队列不满。<br>支持阻塞的<code>移除方法take</code>: 队列空时，获取元素的线程会<code>等待队列变为非空</code></p><ul><li><p>BlockingQueue实现被设计为主要用于生产者 - 消费者队列</p></li><li><p>BlockingQueue实现是线程安全的。所有排队方法使用内部锁或其他形式的并发控制在<code>原子</code>上实现其效果。</p></li><li><p>BlockingQueue方法有四种形式，具有不同的操作方式，不能立即满足，但可能在将来的某个时间点满足：</p><ul><li>一个抛出异常</li><li>返回一个特殊值（ null或false ，具体取决于操作）</li><li>第三个程序将无限期地阻止当前线程，直到操作成功为止</li><li>在放弃之前只有给定的最大时限。</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于JAVA对象</title>
      <link href="/2023/04/27/%E5%85%B3%E4%BA%8EJAVA%E5%AF%B9%E8%B1%A1/"/>
      <url>/2023/04/27/%E5%85%B3%E4%BA%8EJAVA%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p>###JAVA对象结构</p><p>由三部分构成：对象头、实例数据、填充字节。为了保证高效，对象头被设计的很小，并且是非结构化的。</p><p>填充字节是为了满足JAVA 的对象大小都是8bit的n倍设置的。</p><p>对象头包含了Mark Word和Class Point信息：其中Class point是当前对象类型的指针，指向了当前对象所在方法区的类型数据；Mark Word存储了和当前对象运行时状态有关的数据，比如锁状态标志，HashCode等</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7ad6ab858b2d759bc1be9c5852ed4704.png" alt="img"></p><ol><li>实例数据：存放类的属性数据信息，包括父类的属性信息；</li><li>对齐填充：由于虚拟机要求 对象起始地址必须是8字节的整数倍。填充数据不是必须存在的，仅仅是为了字节对齐；</li><li>对象头：Java对象头一般占有2个机器码（在32位虚拟机中，1个机器码等于4字节，也就是32bit，在64位虚拟机中，1个机器码是8个字节，也就是64bit），但是如果对象是数组类型，则需要3个机器码，因为JVM虚拟机可以通过Java对象的元数据信息确定Java对象的大小，但是无法从数组的元数据来确认数组的大小，所以用一块来记录数组长度。</li></ol><p>对象头的最后两位存储了锁的标志位，01是初始状态，未加锁，其对象头里存储的是对象本身的哈希码，随着锁级别的不同，对象头里会存储不同的内容。偏向锁存储的是当前占用此对象的线程ID；而轻量级则存储指向线程栈中锁记录的指针。从这里我们可以看到，“锁”这个东西，可能是个锁记录+对象头里的引用指针（判断线程是否拥有锁时将线程的锁记录地址和对象头里的指针地址比较)，也可能是对象头里的线程ID（判断线程是否拥有锁时将线程的ID和对象头里存储的线程ID比较）。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>序列化</title>
      <link href="/2023/04/26/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2023/04/26/%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>###序列化</p><ol><li><p>所有需要<strong>网络传输</strong>的对象都需要实现序列化接口，建议所有的javaBean都实现Serializable接口。</p></li><li><p>对象的<strong>类名</strong>、<strong>实例变量</strong>（包括基本类型，数组，对其他对象的引用）都会被序列化；方法、类变量、transient实例变量都不会被序列化。</p></li><li><p>如果想让某个变量不被序列化，使用<strong>transient</strong>修饰。</p></li><li><p>序列化对象的引用类型成员变量，也必须是可序列化的，否则，会报错。</p></li><li><p><strong>反序列化时必须有序列化对象的class文件</strong>。</p></li><li><p>当通过文件、网络来读取序列化后的对象时，必须按照实际写入的<strong>顺序读取</strong>。</p></li><li><p>单例类序列化，需要重写readResolve()方法；否则会破坏单例原则。</p></li><li><p>同一对象<strong>序列化多次</strong>，<strong>只有第一次序列化为二进制流，以后都只是保存序列化编号</strong>，不会重复序列化。</p></li><li><p>建议所有可序列化的类加上serialVersionUID 版本号，方便项目升级。</p></li></ol><p><a href="https://juejin.cn/post/6844903848167866375#heading-9">java序列化，看这篇就够了 - 掘金 (juejin.cn)</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JAVA泛型擦除</title>
      <link href="/2023/04/26/JAVA%E6%B3%9B%E5%9E%8B%E6%93%A6%E9%99%A4/"/>
      <url>/2023/04/26/JAVA%E6%B3%9B%E5%9E%8B%E6%93%A6%E9%99%A4/</url>
      
        <content type="html"><![CDATA[<p>###JAVA泛型擦除原理</p><p>Java 的泛型是伪泛型，因为在编译期间所有的泛型信息都会被擦除掉，泛型擦除具体来说就是在编译成字节码时首先进行类型检查，接着进行类型擦除（即<code>所有类型参数都用他们的限定类型替换，包括类、变量和方法</code>，如果类型变量<code>没有限定</code>，可以替换为<code>Object</code>，如果类型变量有限定则原始类型就用第一个边界的类型来替换，譬如 class Prd&lt;T extends Comparable &amp; Serializable&gt; {} 的原始类型就是 Comparable），接着如果类型擦除和多态性发生冲突时就在子类中生成<u>桥方法</u>解决，接着如果调用泛型方法的返回类型被擦除则在调用该方法时插入强制类型转换。</p><p>先检查再擦除的类型检查是<strong>针对引用</strong>的，用引用调用泛型方法就会对这个引用调用的方法进行类型检测而无关它真正引用的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; arrayList2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">arrayList2.add(<span class="string">&quot;123&quot;</span>); <span class="comment">//编译通过 </span></span><br><span class="line">arrayList2.add(<span class="number">123</span>);<span class="comment">//编译错误</span></span><br><span class="line"><span class="type">String</span> <span class="variable">object2</span> <span class="operator">=</span> arrayList2.get(<span class="number">0</span>); <span class="comment">//返回类型是 String </span></span><br><span class="line"></span><br><span class="line"><span class="type">ArrayList</span> <span class="variable">arrayList3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">arrayList3.add(<span class="string">&quot;123&quot;</span>); <span class="comment">//编译通过 </span></span><br><span class="line">arrayList3.add(<span class="number">123</span>); <span class="comment">//编译通过 </span></span><br><span class="line"><span class="type">Object</span> <span class="variable">object3</span> <span class="operator">=</span> arrayList3.get(<span class="number">0</span>); <span class="comment">//返回类型是 Object</span></span><br></pre></td></tr></table></figure><p>####关于桥方法</p><p>假设有一个超类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Parent</span>&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(T value)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is Parent Class, value is &quot;</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以及一个子类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span>&lt;String&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(String value)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is Child class, value is &quot;</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么在Parent类编译之后，方法上的泛型没有了，参数类型变成了Object类型，那就出现问题了，子类中的sayHello方法是重写了父类的方法，但是根据Java重写的要求，方法的参数类型必须是一致的，那这样不就出错了吗？<strong>子类是String但是父类是Object</strong>。结果是可以正常运行。</p><p>原因是编译器为了维护这种重写的原则，在Child类中自动生成了一个桥方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(Object value)</span></span><br><span class="line">&#123;</span><br><span class="line">    sayHello((String) value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个桥方法实际上就是对超类中sayHello(Obejct)的<strong>重写</strong>。这样做的原因是，当程序员在子类中写下以下这段代码的时候，本意是对超类中的<strong>同名方法进行重写</strong>，但因为超类发生了类型擦除，所以实际上<strong>并没有重写成功</strong>，因此加入了桥方法的机制来避免类型擦除与多态发生冲突。</p><p>java代码中，判断两个方法是否是同一个方法是根据方法的签名来决定的，方法的签名是不包含方法的返回值的，也就是“方法签名&#x3D;方法名+参数”。如果我们代码里面这样写确实是冲突的Java无法找到是哪一个方法，Java虚拟机中的方法签名规则是不同的，其“方法签名&#x3D;方法名+参数+返回值”，所以他是能正确区分两个方法的，所以字节码中是允许存在上面这种情况的。</p><h4 id="关于泛型擦除与多态性的冲突"><a href="#关于泛型擦除与多态性的冲突" class="headerlink" title="关于泛型擦除与多态性的冲突"></a>关于泛型擦除与多态性的冲突</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericClass</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">(T obj)</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    GenericClass&lt;String&gt; genericObj = <span class="keyword">new</span> <span class="title class_">GenericClass</span>&lt;&gt;();<span class="comment">// 冲突 ，编译时报错</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    genericObj.doSomething(obj); <span class="comment">// 编译错误</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在声明 <code>GenericClass&lt;String&gt; genericObj = new GenericClass&lt;&gt;();</code> 时，泛型类型参数 <code>T</code> 被指定为 <code>String</code>，因此 <code>genericObj</code> 的实例只能接受 <code>String</code> 类型的参数。然而，在 <code>genericObj.doSomething(obj);</code> 这行代码中，<code>obj</code> 的类型是 <code>Object</code>，不是 <code>String</code>，因此会导致编译错误。</p><h4 id="多态的优点"><a href="#多态的优点" class="headerlink" title="多态的优点"></a>多态的优点</h4><p>多态性有以下几个优点：</p><ol><li>可扩展性：多态性允许在不修改现有代码的情况下添加<code>新的子类</code>。这样可以更方便地扩展系统功能。</li><li>灵活性：通过多态性，可以在运行时<code>动态地确定对象的实际类型</code>，并调用相应类型的方法。这样可以根据实际需要灵活地处理对象。</li><li>可替换性：多态性允许将一个子类对象赋值给父类引用变量，这样可以在不改变代码的情况下，通过替换不同的子类对象来改变程序的行为。</li><li>可维护性：多态性可以使代码更加模块化和可维护，因为每个子类都可以独立地实现自己的行为，不会对其他代码产生影响。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>套接字</title>
      <link href="/2023/04/26/%E5%A5%97%E6%8E%A5%E5%AD%97/"/>
      <url>/2023/04/26/%E5%A5%97%E6%8E%A5%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p>###套接字解决的问题</p><p>应用层通过传输层进行数据通信时，TCP和UDP会遇到同时为多个应用程序进程提供并发服务的问题。多个TCP连接或多个应用程序进程可能需要通过<strong>同一个TCP协议端口传输数据</strong>。为了<strong>区别不同的应用程序进程和连接</strong>，许多计算机操作系统为应用程序与TCP／IP协议交互提供了称为套接字 (Socket)的接口，区分不同应用程序进程间的网络通信和连接。</p><p>###套接字详细</p><p>生成套接字，主要有3个参数：通信的<strong>目的IP地址</strong>、使用的<strong>传输层协议</strong>(TCP或UDP)和使用的<strong>端口号</strong>。通过将这3个参数结合起来，与一个“插座”Socket绑定，应用层就可以和传输层通过套接字接口，区分来自不同应用程序进程或网络连接的通信，实现数据传输的<strong>并发</strong>服务。</p><p>Socket可以看成在两个程序进行通讯连接中的一个端点，一个程序将一段信息写入Socket中，该Socket将这段信息发送给另外一个Socket中，使这段信息能传送到其他程序中。要通过互联网进行通信，至少需要一对套接字，一个运行于客户机端，称之为ClientSocket，另一个运行于服务器端，称之为serverSocket。根据连接启动的方式以及本地套接字要连接的目标，套接字之间的连接过程可以分为<strong>三个步骤</strong>：服务器监听，客户端请求，连接确认。   </p><p><strong>服务器监听</strong>：是服务器端套接字并不定位具体的客户端套接字，而是处于<strong>等待连接</strong>的状态，实时<strong>监控网络状态</strong>。</p><p><strong>客户端请求</strong>：是指<strong>由客户端的套接字提出连接请求</strong>，要连接的目标是服务器端的套接字。为此，客户端的套接字必须首先<strong>描述它要连接的服务器的套接字</strong>，指出服务器端套接字的<strong>地址和端口号</strong>，然后就向服务器端套接字提出<strong>连接请求</strong>。</p><p><strong>连接确认</strong>：是指当服务器端套接字监听到或者说接收到客户端套接字的连接请求，它就<strong>响应</strong>客户端套接字的请求，建立一个<strong>新的线程</strong>，把服务器端套接字的<strong>描述发给客户端</strong>，一旦客户端<strong>确认</strong>了此描述，连接就建立好了。而服务器端套接字<strong>继续处于监听</strong>状态，继续接收其他客户端套接字的连接请求。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>反射</title>
      <link href="/2023/04/25/%E5%8F%8D%E5%B0%84/"/>
      <url>/2023/04/25/%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<p>###反射</p><p>反射是什么：正常我们创建一个类，是在类中定义属性和方法，从而能够编译得到一个class文件，那么，将这个过程反过来，我们已知class类，来获取该类的属性和方法，就是反射。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2023/04/24/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/04/24/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>###单例模式</p><p>单例模式是Java中最简单的设计模式之一。这种类型的设计模式属于创建者模式，它提供了一种访问对象的最佳方式。</p><p>这种设计模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一对象的方式，可以直接访问，不需要实例化该类的对象。</p><p>#####分类</p><p>饿汉式：类加载就会导致该单实例对象被创建。</p><p>懒汉式：类加载不会导致该单实例对象被创建，而是首次使用该对象时被创建。</p><p>####优缺点</p><p>优点：1.内存中只有一个实例，减少了内存的开销。2.避免对资源的多重占用(比如写文件操作)。</p><p>缺点：没有接口，不能继承。</p><p>主要用于解决一个<strong>全局使用的类</strong>被频繁的创建与销毁的问题。</p><p>#####注：</p><p>1.单例类只能有一个实例。2.单例类必须自己创建自己的实例。3.单例类必须给所有其他对象提供这一实例。</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>#####饿汉式</p><p>1.静态成员变量，就是在构造的时候自己直接创建好唯一静态实例，并提供调用该实例的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HungryChinese</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">HungryChinese</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//在该类中创建一个该类的对象供外界去使用static修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">HungryChinese</span> <span class="variable">hungryChinese</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HungryChinese</span>();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//提供一个公共的访问方式，让外界获取hungryChinese对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HungryChinese <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hungryChinese;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HungryChineseTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//获取单例类的对象，因为对象私有，只能通过方法去获取</span></span><br><span class="line">        <span class="type">HungryChinese</span> <span class="variable">instance</span> <span class="operator">=</span> HungryChinese.getInstance();</span><br><span class="line">        <span class="type">HungryChinese</span> <span class="variable">instance1</span> <span class="operator">=</span> HungryChinese.getInstance();</span><br><span class="line">        <span class="comment">//判断是否为同一个对象</span></span><br><span class="line">        System.out.println(instance.equals(instance1));<span class="comment">// ture</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.静态代码块方式，类加载的时候执行静态语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HungryChinese2</span> &#123;</span><br><span class="line">    <span class="comment">//私有构造方法，为了不让外界创建该类的对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">HungryChinese2</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//声明该类类型的变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HungryChinese2 hungryChinese2;<span class="comment">//初始值为null</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//静态代码块中赋值类被加载的时候执行</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        hungryChinese2 = <span class="keyword">new</span> <span class="title class_">HungryChinese2</span>();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//对外提供的访问方式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HungryChinese2 <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hungryChinese2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HungryChinese2Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">HungryChinese2</span> <span class="variable">instance</span> <span class="operator">=</span> HungryChinese2.getInstance();</span><br><span class="line">        <span class="type">HungryChinese2</span> <span class="variable">instance1</span> <span class="operator">=</span> HungryChinese2.getInstance();</span><br><span class="line">        System.out.println(instance.equals(instance1));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#####懒汉式</p><p>1.线程不安全的情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyMan</span> &#123;</span><br><span class="line">    <span class="comment">//私有构造方法，为了不让外界创建该类的对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazyMan</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//声明LazyMan类型的变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazyMan instance;<span class="comment">//只是声明了该类的对象，没有赋初始值</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//对外提供访问方式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//判断instance是否为null,如果为null,说明还没有创建LazyMan类的对象</span></span><br><span class="line">        <span class="comment">//如果没有，创建一个并返回；如果有，直接返回</span></span><br><span class="line">        <span class="comment">//线程不安全，多线程下会创建多个对象</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">LazyMan</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LazyManTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LazyMan</span> <span class="variable">instance</span> <span class="operator">=</span> LazyMan.getInstance();</span><br><span class="line">        <span class="type">LazyMan</span> <span class="variable">instance1</span> <span class="operator">=</span> LazyMan.getInstance();</span><br><span class="line">        System.out.println(instance.equals(instance1));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.线程安全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> <span class="comment">// 多添加一个synchronized关键字，保证同一时刻最多只有一个线程能执行该方法</span></span><br><span class="line"><span class="comment">//或者下面这种</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br></pre></td></tr></table></figure><p>可以解决线程安全的问题，不过在多个方法访问时会出现排队的情况。</p><p>3.双重检查法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton singleton;<span class="comment">//volatile是Java中的关键字，用来修饰会被不同线程访问和修改的变量。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (singleton == <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    singleton =  <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.静态内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonInstance</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> SingletonInstance.singleton;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.枚举法(推荐)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span> &#123; </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JAVASE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客设置和一些命令</title>
      <link href="/2023/04/24/%E5%8D%9A%E5%AE%A2%E8%AE%BE%E7%BD%AE%E5%92%8C%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/04/24/%E5%8D%9A%E5%AE%A2%E8%AE%BE%E7%BD%AE%E5%92%8C%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>静态网页是通过git的repository代理的，地址是sounio.github.io。博客框架使用了hexo。主题使用了next。</p><p>Git命令</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">以下命令将本地的 master 分支推送到 origin 主机的 master 分支。</span><br><span class="line">git push origin master</span><br><span class="line"></span><br><span class="line">如果本地版本与远程版本有差异，但又要强制推送可以使用 --force 参数：</span><br><span class="line">git push --force origin master</span><br><span class="line"></span><br><span class="line">删除主机的分支可以使用 --delete 参数，以下命令表示删除 origin 主机的 master 分支：</span><br><span class="line">git push origin --delete master</span><br><span class="line"></span><br><span class="line">git add --all 将当前目录下包括子目录下所有改动的文件提交到暂存区，注意只包括改动的文件，不改动的不会放到缓存区，还会把删除的文件也提交进去</span><br><span class="line"></span><br><span class="line">git commit 用于将工作区内容霍暂区内容提交到版本库</span><br><span class="line"></span><br><span class="line">git commit -m [message]</span><br></pre></td></tr></table></figure><p>hexo博客框架</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo g 编译生成</span><br><span class="line"></span><br><span class="line">hexo clean 清理缓存</span><br><span class="line"></span><br><span class="line">hexo d 部署</span><br><span class="line"></span><br><span class="line">hexo new &quot;name&quot; 新建一个name页</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> hexo博客框架、Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
